var searchIndex = {};
searchIndex["lyon"] = {"doc":"# Lyon","items":[[0,"basic_shapes","lyon::tessellation","Tessellation routines for simple shapes.",null,null],[11,"fmt","lyon_tessellation::path_fill","",0,null],[11,"clone","","",0,null],[11,"new","","Constructor.",1,{"inputs":[],"output":{"name":"filltessellator"}}],[11,"tessellate_events","","Compute the tessellation.",1,null],[11,"enable_logging","","Enable some verbose logging during the tessellation, for debugging purposes.",1,null],[11,"from_iter","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"fillevents"}}],[11,"eq","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"default","","",4,{"inputs":[],"output":{"name":"filloptions"}}],[11,"even_odd","","",4,{"inputs":[],"output":{"name":"filloptions"}}],[11,"non_zero","","",4,{"inputs":[],"output":{"name":"filloptions"}}],[11,"with_tolerance","","",4,null],[11,"with_vertex_aa","","",4,null],[11,"new","lyon_tessellation::path_stroke","",5,{"inputs":[],"output":{"name":"stroketessellator"}}],[11,"tessellate","","",5,null],[11,"move_to","","",6,null],[11,"line_to","","",6,null],[11,"close","","",6,null],[11,"current_position","","",6,null],[11,"build","","",6,null],[11,"build_and_reset","","",6,null],[11,"new","","",6,{"inputs":[{"name":"strokeoptions"},{"name":"output"}],"output":{"name":"strokebuilder"}}],[11,"set_options","","",6,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"stroke_width","","",7,{"inputs":[{"name":"f32"}],"output":{"name":"strokeoptions"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"strokeoptions"}}],[11,"with_tolerance","","",7,null],[11,"with_line_cap","","",7,null],[11,"with_line_join","","",7,null],[11,"with_miter_limit","","",7,null],[11,"with_stroke_width","","",7,null],[11,"with_vertex_aa","","",7,null],[11,"eq","","",8,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"eq","","",9,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"hash","lyon_tessellation::geometry_builder","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"offset","","",10,null],[11,"new","","Constructor",11,{"inputs":[],"output":{"name":"vertexbuffers"}}],[11,"with_capacity","","Constructor",11,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"vertexbuffers"}}],[11,"new","","",12,{"inputs":[{"name":"vertexbuffers"},{"name":"ctor"}],"output":{"name":"buffersbuilder"}}],[11,"new_vertex","","",13,null],[11,"hash","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[11,"clone","","",14,null],[11,"add","","",14,null],[11,"begin_geometry","","",12,null],[11,"end_geometry","","",12,null],[11,"add_vertex","","",12,null],[11,"add_triangle","","",12,null],[11,"abort_geometry","","",12,null],[11,"add_quadratic_bezier","","",12,null],[11,"array","euclid::point","",15,null],[11,"length","","",15,null],[11,"normalized","","",15,null],[11,"square_length","","",15,null],[11,"new","lyon_core::path_state","",16,{"inputs":[],"output":{"name":"pathstate"}}],[11,"svg_event","","",16,null],[11,"path_event","","",16,null],[11,"flattened_event","","",16,null],[11,"move_to","","",16,null],[11,"line_to","","",16,null],[11,"curve_to","","",16,null],[11,"close","","",16,null],[11,"next","","",16,null],[11,"relative_next","","",16,null],[11,"get_smooth_ctrl","","",16,null],[11,"from_relative","","",16,null],[11,"svg_to_path_event","","",16,null],[11,"bits","lyon_core::fixed","",17,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",18,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",19,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",20,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",21,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",22,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",23,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",24,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",25,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",26,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",27,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",28,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",29,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",30,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",31,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",32,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",33,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",34,{"inputs":[],"output":{"name":"u32"}}],[11,"raw","","Returns the internal representation.",35,null],[11,"from_raw","","",35,{"inputs":[{"name":"i64"}],"output":{"name":"fp64"}}],[11,"zero","","",35,{"inputs":[],"output":{"name":"fp64"}}],[11,"is_zero","","",35,null],[11,"epsilon","","Smallest increment that can be reresented with this type.",35,{"inputs":[],"output":{"name":"fp64"}}],[11,"from_f32","","Converts from a 32 bits floating point value.",35,{"inputs":[{"name":"f32"}],"output":{"name":"fp64"}}],[11,"to_f32","","Converts to a 32 bits floating point value.",35,null],[11,"from_f64","","Converts from a 64 bits floating point value.",35,{"inputs":[{"name":"f64"}],"output":{"name":"fp64"}}],[11,"to_f64","","Converts to a 64 bits floating point value.",35,null],[11,"sign","","Returns 1 if the number of positive, -1 if it is negative.",35,null],[11,"rem","","Returns the result of self % other.",35,null],[11,"min","","Returns the lowest of the two values.",35,null],[11,"max","","Returns the highest of the two values.",35,null],[11,"abs","","Returns the absolute value of this number.",35,null],[11,"to_fixed","","Returns the same number with a different fractional precision.",35,null],[11,"clone","","",35,null],[11,"eq","","",35,null],[11,"fmt","","",35,null],[11,"fmt","","",35,null],[11,"hash","","",35,null],[11,"partial_cmp","","",35,null],[11,"cmp","","",35,null],[11,"add","","",35,null],[11,"sub","","",35,null],[11,"mul","","",35,null],[11,"neg","","",35,null],[11,"mul","","",35,null],[11,"div","","",35,null],[11,"add_assign","","",35,null],[11,"sub_assign","","",35,null],[11,"into","","",35,null],[11,"from","","",35,{"inputs":[{"name":"f32"}],"output":{"name":"fp64"}}],[11,"into","","",35,null],[11,"from","","",35,{"inputs":[{"name":"f64"}],"output":{"name":"fp64"}}],[11,"raw","","Returns the internal representation.",36,null],[11,"from_raw","","",36,{"inputs":[{"name":"i32"}],"output":{"name":"fp32"}}],[11,"zero","","",36,{"inputs":[],"output":{"name":"fp32"}}],[11,"is_zero","","",36,null],[11,"epsilon","","Smallest increment that can be reresented with this type.",36,{"inputs":[],"output":{"name":"fp32"}}],[11,"from_f32","","Converts from a 32 bits floating point value.",36,{"inputs":[{"name":"f32"}],"output":{"name":"fp32"}}],[11,"to_f32","","Converts to a 32 bits floating point value.",36,null],[11,"from_f64","","Converts from a 64 bits floating point value.",36,{"inputs":[{"name":"f64"}],"output":{"name":"fp32"}}],[11,"to_f64","","Converts to a 64 bits floating point value.",36,null],[11,"sign","","Returns 1 if the number of positive, -1 if it is negative.",36,null],[11,"rem","","Returns the result of self % other.",36,null],[11,"min","","Returns the lowest of the two values.",36,null],[11,"max","","Returns the highest of the two values.",36,null],[11,"abs","","Returns the absolute value of this number.",36,null],[11,"to_fixed","","Returns the same number with a different fractional precision.",36,null],[11,"clone","","",36,null],[11,"eq","","",36,null],[11,"fmt","","",36,null],[11,"fmt","","",36,null],[11,"hash","","",36,null],[11,"partial_cmp","","",36,null],[11,"cmp","","",36,null],[11,"add","","",36,null],[11,"sub","","",36,null],[11,"mul","","",36,null],[11,"neg","","",36,null],[11,"mul","","",36,null],[11,"div","","",36,null],[11,"add_assign","","",36,null],[11,"sub_assign","","",36,null],[11,"into","","",36,null],[11,"from","","",36,{"inputs":[{"name":"f32"}],"output":{"name":"fp32"}}],[11,"into","","",36,null],[11,"from","","",36,{"inputs":[{"name":"f64"}],"output":{"name":"fp32"}}],[11,"one","","",36,{"inputs":[],"output":{"name":"fp32"}}],[11,"from_i32","","",36,{"inputs":[{"name":"i32"}],"output":{"name":"fp32"}}],[11,"truncate_to_i32","","Convert to an i32, truncating the fractional part",36,null],[11,"mul_div","","Computes the self * m / d in one go, avoid the precision loss from shifting bits back\nand forth.",36,null],[11,"min_val","","",36,{"inputs":[],"output":{"name":"fp32"}}],[11,"max_val","","",36,{"inputs":[],"output":{"name":"fp32"}}],[11,"to_fp64","","Casts into a 64 bits fixed point number.",36,null],[11,"div","","",36,null],[11,"one","","",35,{"inputs":[],"output":{"name":"fp64"}}],[11,"from_i64","","",35,{"inputs":[{"name":"i64"}],"output":{"name":"fp64"}}],[11,"truncate_to_i64","","Convert to an i64, truncating the fractional part",35,null],[11,"mul_div","","Computes the self * m / d in one go, avoid the precision loss from shifting bits back\nand forth.",35,null],[11,"to_fp32","","Casts into a 32 bits fixed point number.",35,null],[11,"div","","",35,null],[11,"eq","lyon_core::events","",37,null],[11,"ne","","",37,null],[11,"fmt","","",37,null],[11,"clone","","",37,null],[11,"eq","","",38,null],[11,"ne","","",38,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"fmt","","",39,null],[11,"clone","","",39,null],[11,"to_svg_event","","",38,null],[11,"destination","","",38,null],[11,"to_svg_event","","",39,null],[11,"to_path_event","","",39,null],[3,"RoundedRect","lyon::tessellation::basic_shapes","",null,null],[5,"add_triangle","","Add a triangle to a geometry.",null,null],[5,"tessellate_triangle","","Tessellate a simple triangle geometry.",null,{"inputs":[{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"output"}],"output":{"name":"count"}}],[5,"add_quad","","Add a quad to a geometry.",null,null],[5,"tessellate_quad","","Tessellate a simple quad geometry.",null,{"inputs":[{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"output"}],"output":{"name":"count"}}],[5,"add_rectangle","","Add a Rect to a geometry.",null,null],[5,"tessellate_rectangle","","Tessellate a simple Rect.",null,{"inputs":[{"name":"typedrect"},{"name":"output"}],"output":{"name":"count"}}],[5,"add_rounded_rectangle","","Add a rounded reactangle to a geometry.",null,{"inputs":[{"name":"roundedrect"},{"name":"output"}],"output":{"name":"count"}}],[5,"tessellate_rounded_rectangle","","Tessellate a simple rounded rectangle.",null,{"inputs":[{"name":"roundedrect"},{"name":"output"}],"output":{"name":"count"}}],[5,"tessellate_ellipsis","","Tessellate a simple ellipsis.",null,{"inputs":[{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"u32"},{"name":"output"}],"output":{"name":"count"}}],[0,"path_fill","lyon::tessellation","# Path fill tessellator",null,null],[6,"FillResult","lyon::tessellation::path_fill","",null,null],[4,"FillError","","The fill tessellator&#39;s error enumeration.",null,null],[13,"Unknown","","",0,null],[3,"FillTessellator","","A Context object that can tessellate fill operations for complex paths.",null,null],[3,"FillEvents","","A sequence of edges sorted from top to bottom, to be used as the tessellator&#39;s input.",null,null],[4,"FillRule","","The fill rule defines how to determine what is inside and what is outside of the shape.",null,null],[13,"EvenOdd","","",3,null],[13,"NonZero","","",3,null],[3,"FillOptions","","Parameters for the tessellator.",null,null],[12,"tolerance","","Maximum allowed distance to the path when building an approximation.",4,null],[12,"fill_rule","","See the SVG specification.",4,null],[12,"vertex_aa","","An anti-aliasing trick extruding a 1-px wide strip around the edges with\na gradient to smooth the edges.",4,null],[0,"path_stroke","lyon::tessellation","## Path stroke tessellator",null,null],[6,"StrokeResult","lyon::tessellation::path_stroke","",null,null],[3,"StrokeTessellator","","A Context object that can tessellate stroke operations for complex paths.",null,null],[3,"StrokeBuilder","","A builder that tessellates a stroke directly without allocating any intermediate data structure.",null,null],[3,"StrokeOptions","","Parameters for the tessellator.",null,null],[12,"stroke_width","","Thickness of the stroke.",7,null],[12,"line_cap","","See the SVG secification.",7,null],[12,"line_join","","See the SVG secification.",7,null],[12,"miter_limit","","See the SVG secification.",7,null],[12,"tolerance","","Maximum allowed distance to the path when building an approximation.",7,null],[12,"vertex_aa","","An anti-aliasing trick extruding a 1-px wide strip around the edges with\na gradient to smooth the edges.",7,null],[4,"LineCap","","Line cap as defined by the SVG specification.",null,null],[13,"Butt","","",8,null],[13,"Square","","",8,null],[13,"Round","","",8,null],[4,"LineJoin","","Line join as defined by the SVG specification.",null,null],[13,"Miter","","",9,null],[13,"MiterClip","","",9,null],[13,"Round","","",9,null],[13,"Bevel","","",9,null],[13,"Arcs","","",9,null],[0,"geometry_builder","lyon::tessellation","# Geometry builder",null,null],[6,"Index","lyon::tessellation::geometry_builder","",null,null],[3,"VertexId","","A virtual vertex offset in a geometry.",null,null],[12,"0","","",10,null],[8,"GeometryBuilder","","An interface separating tessellators and other geometry generation algorithms from the\nactual vertex construction.",null,null],[10,"begin_geometry","","Called at the beginning of a generation.",40,null],[10,"end_geometry","","Called at the end of a generation.\nReturns the number of vertices and indices added since the last time begin_geometry was\ncalled.",40,null],[10,"add_vertex","","Inserts a vertex, providing its position, and optionally a normal.\nRetuns a vertex id that is only valid between begin_geometry and end_geometry.",40,null],[10,"add_triangle","","Insert a triangle made of vertices that were added after the last call to begin_geometry.",40,null],[10,"abort_geometry","","abort_geometry is called instead of end_geometry if an error occured while producing\nthe geometry and we won&#39;t be able to finish.",40,null],[8,"BezierGeometryBuilder","","An extension to GeometryBuilder that can handle quadratic bezier segments.",null,null],[10,"add_quadratic_bezier","","Insert a quadratic bezier curve.\nThe interrior is on the right side of the curve.",41,null],[3,"VertexBuffers","","Structure that holds the vertex and index data.",null,null],[12,"vertices","","",11,null],[12,"indices","","",11,null],[3,"BuffersBuilder","","A temporary view on a VertexBuffers object which facilitate the population of vertex and index\ndata.",null,null],[5,"vertex_builder","","Creates a BuffersBuilder.",null,{"inputs":[{"name":"vertexbuffers"},{"name":"ctor"}],"output":{"name":"buffersbuilder"}}],[8,"VertexConstructor","","A trait specifying how to create vertex values.",null,null],[10,"new_vertex","","",42,null],[3,"Identity","","A dummy vertex constructor that just forwards its inputs.",null,null],[6,"SimpleBuffersBuilder","","",null,null],[5,"simple_builder","","Creates a SimpleBuffersBuilder.",null,{"inputs":[{"name":"vertexbuffers"}],"output":{"name":"buffersbuilder"}}],[3,"Count","","Number of vertices and indices added during the tessellation.",null,null],[11,"eq","lyon_core","",43,null],[11,"ne","","",43,null],[11,"fmt","","",43,null],[11,"clone","","",43,null],[4,"SvgEvent","lyon::tessellation","",null,null],[13,"MoveTo","","",37,null],[13,"RelativeMoveTo","","",37,null],[13,"LineTo","","",37,null],[13,"RelativeLineTo","","",37,null],[13,"QuadraticTo","","",37,null],[13,"RelativeQuadraticTo","","",37,null],[13,"CubicTo","","",37,null],[13,"RelativeCubicTo","","",37,null],[13,"ArcTo","","",37,null],[13,"RelativeArcTo","","",37,null],[13,"HorizontalLineTo","","",37,null],[13,"VerticalLineTo","","",37,null],[13,"RelativeHorizontalLineTo","","",37,null],[13,"RelativeVerticalLineTo","","",37,null],[13,"SmoothQuadraticTo","","",37,null],[13,"SmoothRelativeQuadraticTo","","",37,null],[13,"SmoothCubicTo","","",37,null],[13,"SmoothRelativeCubicTo","","",37,null],[13,"Close","","",37,null],[0,"math_utils","","Various math tools that are usefull for several modules.",null,null],[5,"fuzzy_eq_f32","lyon::tessellation::math_utils","",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"bool"}}],[5,"fuzzy_eq","","",null,{"inputs":[{"name":"typedpoint2d"},{"name":"typedpoint2d"}],"output":{"name":"bool"}}],[5,"is_below","","Defines an ordering between two points",null,{"inputs":[{"name":"typedpoint2d"},{"name":"typedpoint2d"}],"output":{"name":"bool"}}],[5,"is_below_fixed","","Defines an ordering between two points",null,{"inputs":[{"name":"typedpoint2d"},{"name":"typedpoint2d"}],"output":{"name":"bool"}}],[5,"ellipse_center_to_point","","",null,{"inputs":[{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"typedpoint2d"}],"output":{"name":"typedpoint2d"}}],[5,"ellipse_point_from_angle","","",null,{"inputs":[{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"f32"}],"output":{"name":"typedpoint2d"}}],[5,"directed_angle","","Angle between vectors v1 and v2 (oriented clockwise assyming y points downwards).\nThe result is a number between 0 and 2*PI.",null,{"inputs":[{"name":"typedpoint2d"},{"name":"typedpoint2d"}],"output":{"name":"f32"}}],[5,"directed_angle2","","",null,{"inputs":[{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"typedpoint2d"}],"output":{"name":"f32"}}],[5,"angle_between","","",null,{"inputs":[{"name":"typedpoint2d"},{"name":"typedpoint2d"}],"output":{"name":"f32"}}],[5,"tangent","","",null,{"inputs":[{"name":"typedpoint2d"}],"output":{"name":"typedpoint2d"}}],[5,"line_intersection","","",null,{"inputs":[{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"typedpoint2d"}],"output":{"name":"option"}}],[5,"segment_intersection","","",null,{"inputs":[{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"typedpoint2d"}],"output":{"name":"option"}}],[5,"line_horizontal_intersection","","",null,{"inputs":[{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"f32"}],"output":{"name":"f32"}}],[0,"math","lyon::tessellation","",null,null],[6,"Point","lyon::tessellation::math","",null,null],[6,"IntPoint","","",null,null],[6,"Int64Point","","",null,null],[6,"F64Point","","",null,null],[6,"Vec2","","",null,null],[6,"IntVec2","","",null,null],[6,"Size","","",null,null],[6,"IntSize","","",null,null],[6,"Rect","","",null,null],[6,"IntRect","","",null,null],[6,"FixedPoint32","","",null,null],[6,"FixedPoint64","","",null,null],[6,"TessPoint","","",null,null],[6,"TessPoint64","","",null,null],[5,"fixed","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"fp32"}}],[6,"Vec3","","",null,null],[6,"IntVec3","","",null,null],[6,"Mat4","","",null,null],[5,"point","","",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"typedpoint2d"}}],[5,"vec2","","",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"typedpoint2d"}}],[5,"int_vec2","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"typedpoint2d"}}],[5,"size","","",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"typedsize2d"}}],[5,"int_size","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"typedsize2d"}}],[5,"rect","","",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"typedrect"}}],[5,"int_rect","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"typedrect"}}],[5,"rad","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"length"}}],[8,"Vec2Array","","",null,null],[10,"array","","",44,null],[8,"Vec2Length","","",null,null],[10,"length","","",45,null],[10,"normalized","","",45,null],[8,"Vec2SquareLength","","",null,null],[10,"square_length","","",46,null],[11,"encode","euclid::length","",47,null],[11,"decode","","",47,{"inputs":[{"name":"__dtunit"}],"output":{"name":"result"}}],[11,"clone","","",47,null],[11,"heap_size_of_children","","",47,null],[11,"deserialize","","",47,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",47,null],[11,"new","","",47,{"inputs":[{"name":"t"}],"output":{"name":"length"}}],[11,"get","","",47,null],[11,"fmt","","",47,null],[11,"fmt","","",47,null],[11,"add","","",47,null],[11,"add_assign","","",47,null],[11,"sub","","",47,null],[11,"sub_assign","","",47,null],[11,"div","","",47,null],[11,"mul","","",47,null],[11,"div","","",47,null],[11,"neg","","",47,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",47,null],[11,"eq","","",47,null],[11,"partial_cmp","","",47,null],[11,"cmp","","",47,null],[11,"zero","","",47,{"inputs":[],"output":{"name":"length"}}],[11,"clone","euclid::matrix2d","",48,null],[11,"heap_size_of_children","","",48,null],[11,"deserialize","","",48,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",48,null],[11,"eq","","",48,null],[11,"hash","","",48,null],[11,"row_major","","Create a matrix specifying its components in row-major order.",48,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix2d"}}],[11,"column_major","","Create a matrix specifying its components in column-major order.",48,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix2d"}}],[11,"to_row_major_array","","Returns an array containing this matrix&#39;s terms in row-major order (the order\nin which the matrix is actually laid out in memory).",48,null],[11,"to_column_major_array","","Returns an array containing this matrix&#39;s terms in column-major order.",48,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",48,null],[11,"from_untyped","","Tag a unitless value with units.",48,{"inputs":[{"name":"typedmatrix2d"}],"output":{"name":"typedmatrix2d"}}],[11,"identity","","",48,{"inputs":[],"output":{"name":"typedmatrix2d"}}],[11,"post_mul","","Returns the multiplication of the two matrices such that mat&#39;s transformation\napplies after self&#39;s transformation.",48,null],[11,"pre_mul","","Returns the multiplication of the two matrices such that mat&#39;s transformation\napplies before self&#39;s transformation.",48,null],[11,"create_translation","","Returns a translation matrix.",48,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix2d"}}],[11,"post_translated","","Applies a translation after self&#39;s transformation and returns the resulting matrix.",48,null],[11,"pre_translated","","Applies a translation before self&#39;s transformation and returns the resulting matrix.",48,null],[11,"create_scale","","Returns a scale matrix.",48,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix2d"}}],[11,"post_scaled","","Applies a scale after self&#39;s transformation and returns the resulting matrix.",48,null],[11,"pre_scaled","","Applies a scale before self&#39;s transformation and returns the resulting matrix.",48,null],[11,"create_rotation","","Returns a rotation matrix.",48,{"inputs":[{"name":"length"}],"output":{"name":"typedmatrix2d"}}],[11,"post_rotated","","Applies a rotation after self&#39;s transformation and returns the resulting matrix.",48,null],[11,"pre_rotated","","Applies a rotation after self&#39;s transformation and returns the resulting matrix.",48,null],[11,"transform_point","","Returns the given point transformed by this matrix.",48,null],[11,"transform_rect","","Returns a rectangle that encompasses the result of transforming the given rectangle by this\nmatrix.",48,null],[11,"determinant","","Computes and returns the determinant of this matrix.",48,null],[11,"inverse","","Returns the inverse matrix if possible.",48,null],[11,"with_destination","","Returns the same matrix with a different destination unit.",48,null],[11,"with_source","","Returns the same matrix with a different source unit.",48,null],[11,"approx_eq","","",48,null],[11,"clone","euclid::matrix4d","",49,null],[11,"heap_size_of_children","","",49,null],[11,"deserialize","","",49,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",49,null],[11,"eq","","",49,null],[11,"hash","","",49,null],[11,"row_major","","Create a matrix specifying its components in row-major order.",49,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"column_major","","Create a matrix specifying its components in column-major order.",49,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"row_major_2d","","Create a 4 by 4 matrix representing a 2d transformation, specifying its components\nin row-major order.",49,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"ortho","","Create an orthogonal projection matrix.",49,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"identity","","",49,{"inputs":[],"output":{"name":"typedmatrix4d"}}],[11,"is_2d","","Returns true if this matrix can be represented with a TypedMatrix2D.",49,null],[11,"to_2d","","Create a 2D matrix picking the relevent terms from this matrix.",49,null],[11,"approx_eq","","",49,null],[11,"with_destination","","Returns the same matrix with a different destination unit.",49,null],[11,"with_source","","Returns the same matrix with a different source unit.",49,null],[11,"post_mul","","Returns the multiplication of the two matrices such that mat&#39;s transformation\napplies after self&#39;s transformation.",49,null],[11,"pre_mul","","Returns the multiplication of the two matrices such that mat&#39;s transformation\napplies before self&#39;s transformation.",49,null],[11,"inverse","","Returns the inverse matrix if possible.",49,null],[11,"determinant","","Compute the determinant of the matrix.",49,null],[11,"mul_s","","Multiplies all of the matrix&#39;s component by a scalar and returns the result.",49,null],[11,"from_scale_factor","","Convenience function to create a scale matrix from a ScaleFactor.",49,{"inputs":[{"name":"scalefactor"}],"output":{"name":"typedmatrix4d"}}],[11,"transform_point","","Returns the given 2d point transformed by this matrix.",49,null],[11,"transform_point3d","","Returns the given 3d point transformed by this matrix.",49,null],[11,"transform_point4d","","Returns the given 4d point transformed by this matrix.",49,null],[11,"create_translation","","Create a 3d translation matrix",49,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"pre_translated","","Returns a matrix with a translation applied before self&#39;s transformation.",49,null],[11,"post_translated","","Returns a matrix with a translation applied after self&#39;s transformation.",49,null],[11,"create_scale","","Create a 3d scale matrix",49,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"pre_scaled","","Returns a matrix with a scale applied before self&#39;s transformation.",49,null],[11,"post_scaled","","Returns a matrix with a scale applied after self&#39;s transformation.",49,null],[11,"create_rotation","","Create a 3d rotation matrix from an angle / axis.\nThe supplied axis must be normalized.",49,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"length"}],"output":{"name":"typedmatrix4d"}}],[11,"post_rotated","","Returns a matrix with a rotation applied after self&#39;s transformation.",49,null],[11,"pre_rotated","","Returns a matrix with a rotation applied before self&#39;s transformation.",49,null],[11,"create_skew","","Create a 2d skew matrix.",49,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"typedmatrix4d"}}],[11,"create_perspective","","Create a simple perspective projection matrix",49,{"inputs":[{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"to_row_major_array","","Returns an array containing this matrix&#39;s terms in row-major order (the order\nin which the matrix is actually laid out in memory).",49,null],[11,"to_column_major_array","","Returns an array containing this matrix&#39;s terms in column-major order.",49,null],[11,"to_row_arrays","","Returns an array containing this matrix&#39;s 4 rows in (in row-major order)\nas arrays.",49,null],[11,"to_column_arrays","","Returns an array containing this matrix&#39;s 4 columns in (in row-major order,\nor 4 rows in column-major order) as arrays.",49,null],[11,"fmt","","",49,null],[11,"encode","euclid::point","",15,null],[11,"decode","","",15,{"inputs":[{"name":"__dtu"}],"output":{"name":"result"}}],[11,"clone","","",15,null],[11,"heap_size_of_children","","",15,null],[11,"deserialize","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",15,null],[11,"eq","","",15,null],[11,"hash","","",15,null],[11,"zero","","Constructor, setting all components to zero.",15,{"inputs":[],"output":{"name":"typedpoint2d"}}],[11,"fmt","","",15,null],[11,"fmt","","",15,null],[11,"new","","Constructor taking scalar values directly.",15,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedpoint2d"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",15,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"typedpoint2d"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",15,null],[11,"y_typed","","Returns self.y as a Length carrying the unit.",15,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",15,null],[11,"from_untyped","","Tag a unitless value with units.",15,{"inputs":[{"name":"typedpoint2d"}],"output":{"name":"typedpoint2d"}}],[11,"to_array","","",15,null],[11,"dot","","Dot product.",15,null],[11,"cross","","Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0]..",15,null],[11,"add","","",15,null],[11,"add","","",15,null],[11,"add_size","","",15,null],[11,"sub","","",15,null],[11,"neg","","",15,null],[11,"min","","",15,null],[11,"max","","",15,null],[11,"mul","","",15,null],[11,"div","","",15,null],[11,"mul","","",15,null],[11,"div","","",15,null],[11,"round","","Rounds each component to the nearest integer value.",15,null],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the orginal value.",15,null],[11,"floor","","Rounds each component to the biggest integer equal or lower than the orginal value.",15,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",15,null],[11,"to_f32","","Cast into an f32 vector.",15,null],[11,"to_uint","","Cast into an usize point, truncating decimals if any.",15,null],[11,"to_i32","","Cast into an i32 point, truncating decimals if any.",15,null],[11,"to_i64","","Cast into an i64 point, truncating decimals if any.",15,null],[11,"encode","","",50,null],[11,"decode","","",50,{"inputs":[{"name":"__dtu"}],"output":{"name":"result"}}],[11,"clone","","",50,null],[11,"heap_size_of_children","","",50,null],[11,"deserialize","","",50,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",50,null],[11,"eq","","",50,null],[11,"hash","","",50,null],[11,"zero","","Constructor, setting all copmonents to zero.",50,{"inputs":[],"output":{"name":"typedpoint3d"}}],[11,"fmt","","",50,null],[11,"fmt","","",50,null],[11,"new","","Constructor taking scalar values directly.",50,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedpoint3d"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",50,{"inputs":[{"name":"length"},{"name":"length"},{"name":"length"}],"output":{"name":"typedpoint3d"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",50,null],[11,"y_typed","","Returns self.y as a Length carrying the unit.",50,null],[11,"z_typed","","Returns self.z as a Length carrying the unit.",50,null],[11,"to_array","","",50,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",50,null],[11,"from_untyped","","Tag a unitless value with units.",50,{"inputs":[{"name":"typedpoint3d"}],"output":{"name":"typedpoint3d"}}],[11,"dot","","",50,null],[11,"cross","","",50,null],[11,"add","","",50,null],[11,"sub","","",50,null],[11,"neg","","",50,null],[11,"min","","",50,null],[11,"max","","",50,null],[11,"round","","Rounds each component to the nearest integer value.",50,null],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the orginal value.",50,null],[11,"floor","","Rounds each component to the biggest integer equal or lower than the orginal value.",50,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",50,null],[11,"to_f32","","Cast into an f32 vector.",50,null],[11,"to_uint","","Cast into an usize point, truncating decimals if any.",50,null],[11,"to_i32","","Cast into an i32 point, truncating decimals if any.",50,null],[11,"to_i64","","Cast into an i64 point, truncating decimals if any.",50,null],[11,"encode","","",51,null],[11,"decode","","",51,{"inputs":[{"name":"__dtu"}],"output":{"name":"result"}}],[11,"clone","","",51,null],[11,"heap_size_of_children","","",51,null],[11,"deserialize","","",51,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",51,null],[11,"eq","","",51,null],[11,"hash","","",51,null],[11,"zero","","Constructor, setting all copmonents to zero.",51,{"inputs":[],"output":{"name":"typedpoint4d"}}],[11,"fmt","","",51,null],[11,"fmt","","",51,null],[11,"new","","Constructor taking scalar values directly.",51,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedpoint4d"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",51,{"inputs":[{"name":"length"},{"name":"length"},{"name":"length"},{"name":"length"}],"output":{"name":"typedpoint4d"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",51,null],[11,"y_typed","","Returns self.y as a Length carrying the unit.",51,null],[11,"z_typed","","Returns self.z as a Length carrying the unit.",51,null],[11,"w_typed","","Returns self.w as a Length carrying the unit.",51,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",51,null],[11,"from_untyped","","Tag a unitless value with units.",51,{"inputs":[{"name":"typedpoint4d"}],"output":{"name":"typedpoint4d"}}],[11,"to_array","","",51,null],[11,"to_2d","","Convert into a 2d point.",51,null],[11,"to_3d","","Convert into a 3d point.",51,null],[11,"add","","",51,null],[11,"sub","","",51,null],[11,"neg","","",51,null],[11,"min","","",51,null],[11,"max","","",51,null],[11,"round","","Rounds each component to the nearest integer value.",51,null],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the orginal value.",51,null],[11,"floor","","Rounds each component to the biggest integer equal or lower than the orginal value.",51,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",51,null],[11,"to_f32","","Cast into an f32 vector.",51,null],[11,"to_uint","","Cast into an usize point, truncating decimals if any.",51,null],[11,"to_i32","","Cast into an i32 point, truncating decimals if any.",51,null],[11,"to_i64","","Cast into an i64 point, truncating decimals if any.",51,null],[11,"encode","euclid::rect","",52,null],[11,"decode","","",52,{"inputs":[{"name":"__dtu"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",52,null],[11,"deserialize","","",52,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",52,null],[11,"clone","","",52,null],[11,"eq","","",52,null],[11,"fmt","","",52,null],[11,"fmt","","",52,null],[11,"new","","Constructor.",52,{"inputs":[{"name":"typedpoint2d"},{"name":"typedsize2d"}],"output":{"name":"typedrect"}}],[11,"intersects","","",52,null],[11,"max_x","","",52,null],[11,"min_x","","",52,null],[11,"max_y","","",52,null],[11,"min_y","","",52,null],[11,"max_x_typed","","",52,null],[11,"min_x_typed","","",52,null],[11,"max_y_typed","","",52,null],[11,"min_y_typed","","",52,null],[11,"intersection","","",52,null],[11,"translate","","Translates the rect by a vector.",52,null],[11,"contains","","Returns true if this rectangle contains the point. Points are considered\nin the rectangle if they are on the left or top edge, but outside if they\nare on the right or bottom edge.",52,null],[11,"contains_rect","","Returns true if this rectangle contains the interior of rect. Always\nreturns true if rect is empty, and always returns false if rect is\nnonempty but this rectangle is empty.",52,null],[11,"inflate","","",52,null],[11,"inflate_typed","","",52,null],[11,"top_right","","",52,null],[11,"bottom_left","","",52,null],[11,"bottom_right","","",52,null],[11,"translate_by_size","","",52,null],[11,"union","","",52,null],[11,"scale","","",52,null],[11,"zero","","Constructor, setting all sides to zero.",52,{"inputs":[],"output":{"name":"typedrect"}}],[11,"is_empty","","Returns true if the size is zero, regardless of the origin&#39;s value.",52,null],[11,"mul","","",52,null],[11,"div","","",52,null],[11,"mul","","",52,null],[11,"div","","",52,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",52,null],[11,"from_untyped","","Tag a unitless value with units.",52,{"inputs":[{"name":"typedrect"}],"output":{"name":"typedrect"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",52,null],[11,"round","","Return a rectangle with edges rounded to integer coordinates, such that\nthe returned rectangle has the same set of pixel centers as the original\none.\nEdges at offset 0.5 round up.\nSuitable for most places where integral device coordinates\nare needed, but note that any translation should be applied first to\navoid pixel rounding errors.\nNote that this is *not* rounding to nearest integer if the values are negative.\nThey are always rounding as floor(n + 0.5).",52,null],[11,"round_in","","Return a rectangle with edges rounded to integer coordinates, such that\nthe original rectangle contains the resulting rectangle.",52,null],[11,"round_out","","Return a rectangle with edges rounded to integer coordinates, such that\nthe original rectangle is contained in the resulting rectangle.",52,null],[11,"to_f32","","Cast into an f32 vector.",52,null],[11,"to_uint","","Cast into an usize vector, truncating decimals if any.",52,null],[11,"to_i32","","Cast into an i32 vector, truncating decimals if any.",52,null],[11,"to_i64","","Cast into an i64 vector, truncating decimals if any.",52,null],[11,"encode","euclid::scale_factor","",53,null],[11,"decode","","",53,{"inputs":[{"name":"__dtsrcdst"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",53,null],[11,"deserialize","","",53,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",53,null],[11,"new","","",53,{"inputs":[{"name":"t"}],"output":{"name":"scalefactor"}}],[11,"get","","",53,null],[11,"inv","","The inverse ScaleFactor (1.0 / self).",53,null],[11,"mul","","",53,null],[11,"add","","",53,null],[11,"sub","","",53,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",53,null],[11,"eq","","",53,null],[11,"clone","","",53,null],[11,"fmt","","",53,null],[11,"fmt","","",53,null],[11,"clone","euclid::side_offsets","",54,null],[11,"heap_size_of_children","","",54,null],[11,"deserialize","","",54,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",54,null],[11,"eq","","",54,null],[11,"hash","","",54,null],[11,"fmt","","",54,null],[11,"new","","Constructor taking a scalar for each side.",54,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedsideoffsets2d"}}],[11,"from_lengths","","Constructor taking a typed Length for each side.",54,{"inputs":[{"name":"length"},{"name":"length"},{"name":"length"},{"name":"length"}],"output":{"name":"typedsideoffsets2d"}}],[11,"top_typed","","Access self.top as a typed Length instead of a scalar value.",54,null],[11,"right_typed","","Access self.right as a typed Length instead of a scalar value.",54,null],[11,"bottom_typed","","Access self.bottom as a typed Length instead of a scalar value.",54,null],[11,"left_typed","","Access self.left as a typed Length instead of a scalar value.",54,null],[11,"new_all_same","","Constructor setting the same value to all sides, taking a scalar value directly.",54,{"inputs":[{"name":"t"}],"output":{"name":"typedsideoffsets2d"}}],[11,"from_length_all_same","","Constructor setting the same value to all sides, taking a typed Length.",54,{"inputs":[{"name":"length"}],"output":{"name":"typedsideoffsets2d"}}],[11,"horizontal","","",54,null],[11,"vertical","","",54,null],[11,"horizontal_typed","","",54,null],[11,"vertical_typed","","",54,null],[11,"add","","",54,null],[11,"zero","","Constructor, setting all sides to zero.",54,{"inputs":[],"output":{"name":"typedsideoffsets2d"}}],[11,"encode","euclid::size","",55,null],[11,"decode","","",55,{"inputs":[{"name":"__dtu"}],"output":{"name":"result"}}],[11,"clone","","",55,null],[11,"heap_size_of_children","","",55,null],[11,"deserialize","","",55,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",55,null],[11,"eq","","",55,null],[11,"hash","","",55,null],[11,"fmt","","",55,null],[11,"fmt","","",55,null],[11,"new","","Constructor taing scalar values.",55,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedsize2d"}}],[11,"from_lengths","","Constructor taing scalar stronlgy typed lengths.",55,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"typedsize2d"}}],[11,"round","","Rounds each component to the nearest integer value.",55,null],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the orginal value.",55,null],[11,"floor","","Rounds each component to the biggest integer equal or lower than the orginal value.",55,null],[11,"area","","",55,null],[11,"zero","","",55,{"inputs":[],"output":{"name":"typedsize2d"}}],[11,"zero","","",55,{"inputs":[],"output":{"name":"typedsize2d"}}],[11,"mul","","",55,null],[11,"div","","",55,null],[11,"mul","","",55,null],[11,"div","","",55,null],[11,"width_typed","","Returns self.width as a Length carrying the unit.",55,null],[11,"height_typed","","Returns self.height as a Length carrying the unit.",55,null],[11,"to_array","","",55,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",55,null],[11,"from_untyped","","Tag a unitless value with units.",55,{"inputs":[{"name":"typedsize2d"}],"output":{"name":"typedsize2d"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",55,null],[11,"to_f32","","Cast into an f32 size.",55,null],[11,"to_uint","","Cast into an usize size, truncating decimals if any.",55,null],[11,"to_i32","","Cast into an i32 size, truncating decimals if any.",55,null],[11,"to_i64","","Cast into an i64 size, truncating decimals if any.",55,null],[11,"encode","euclid","",56,null],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",56,null],[6,"Point2D","lyon::tessellation::math","",null,null],[6,"Radians","","",null,null],[0,"path_state","lyon::tessellation","",null,null],[3,"PathState","lyon::tessellation::path_state","Represents the current state of a path while it is being built.",null,null],[12,"current","","The current point.",16,null],[12,"first","","The first point of the current sub-path.",16,null],[12,"last_ctrl","","The last control point.",16,null],[0,"fixed","lyon::tessellation","",null,null],[3,"_1","lyon::tessellation::fixed","",null,null],[3,"_2","","",null,null],[3,"_3","","",null,null],[3,"_4","","",null,null],[3,"_5","","",null,null],[3,"_6","","",null,null],[3,"_7","","",null,null],[3,"_8","","",null,null],[3,"_9","","",null,null],[3,"_10","","",null,null],[3,"_11","","",null,null],[3,"_12","","",null,null],[3,"_13","","",null,null],[3,"_14","","",null,null],[3,"_15","","",null,null],[3,"_16","","",null,null],[3,"_24","","",null,null],[3,"_32","","",null,null],[8,"FractionalBits","","",null,null],[10,"bits","","",57,{"inputs":[],"output":{"name":"u32"}}],[3,"Fp32","","A 32 fixed point number.\nThe size of the fractional is defined by the type parameter F.",null,null],[3,"Fp64","","A 64 bits fixed point number.\nThe size of the fractional is defined by the type parameter F.",null,null],[3,"ArcFlags","lyon::tessellation","Flag parameters for arcs as described by the SVG specification.",null,null],[12,"large_arc","","",43,null],[12,"sweep","","",43,null],[0,"events","","",null,null],[4,"SvgEvent","lyon::tessellation::events","",null,null],[13,"MoveTo","","",37,null],[13,"RelativeMoveTo","","",37,null],[13,"LineTo","","",37,null],[13,"RelativeLineTo","","",37,null],[13,"QuadraticTo","","",37,null],[13,"RelativeQuadraticTo","","",37,null],[13,"CubicTo","","",37,null],[13,"RelativeCubicTo","","",37,null],[13,"ArcTo","","",37,null],[13,"RelativeArcTo","","",37,null],[13,"HorizontalLineTo","","",37,null],[13,"VerticalLineTo","","",37,null],[13,"RelativeHorizontalLineTo","","",37,null],[13,"RelativeVerticalLineTo","","",37,null],[13,"SmoothQuadraticTo","","",37,null],[13,"SmoothRelativeQuadraticTo","","",37,null],[13,"SmoothCubicTo","","",37,null],[13,"SmoothRelativeCubicTo","","",37,null],[13,"Close","","",37,null],[4,"PathEvent","","",null,null],[13,"MoveTo","","",38,null],[13,"LineTo","","",38,null],[13,"QuadraticTo","","",38,null],[13,"CubicTo","","",38,null],[13,"Close","","",38,null],[4,"FlattenedEvent","","",null,null],[13,"MoveTo","","",39,null],[13,"LineTo","","",39,null],[13,"Close","","",39,null],[3,"PathState","lyon::tessellation","Represents the current state of a path while it is being built.",null,null],[12,"current","","The current point.",16,null],[12,"first","","The first point of the current sub-path.",16,null],[12,"last_ctrl","","The last control point.",16,null],[4,"PathEvent","","",null,null],[13,"MoveTo","","",38,null],[13,"LineTo","","",38,null],[13,"QuadraticTo","","",38,null],[13,"CubicTo","","",38,null],[13,"Close","","",38,null],[4,"FlattenedEvent","","",null,null],[13,"MoveTo","","",39,null],[13,"LineTo","","",39,null],[13,"Close","","",39,null],[11,"new","lyon_path::path","",58,null],[11,"iter","","",58,null],[11,"path_iter","","",58,null],[11,"points","","",58,null],[11,"verbs","","",58,null],[11,"eq","","",59,null],[11,"fmt","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",60,null],[11,"clone","","",60,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"builder","","Creates a [Builder](struct.Builder.html) to create a path.",60,{"inputs":[],"output":{"name":"builder"}}],[11,"new","","",60,{"inputs":[],"output":{"name":"path"}}],[11,"with_capacity","","",60,{"inputs":[{"name":"usize"}],"output":{"name":"path"}}],[11,"as_slice","","",60,null],[11,"iter","","",60,null],[11,"path_iter","","",60,null],[11,"points","","",60,null],[11,"mut_points","","",60,null],[11,"verbs","","",60,null],[11,"new","","",61,{"inputs":[],"output":{"name":"builder"}}],[11,"with_capacity","","",61,{"inputs":[{"name":"usize"}],"output":{"name":"builder"}}],[11,"with_svg","","",61,null],[11,"flattened","","",61,null],[11,"move_to","","",61,null],[11,"line_to","","",61,null],[11,"close","","",61,null],[11,"current_position","","",61,null],[11,"build","","",61,null],[11,"build_and_reset","","",61,null],[11,"quadratic_bezier_to","","",61,null],[11,"cubic_bezier_to","","",61,null],[11,"fmt","","",62,null],[11,"clone","","",62,null],[11,"new","","",62,null],[11,"next","","",62,null],[3,"PathSlice","lyon::path","",null,null],[3,"Builder","","Builds path object using the BaseBuilder interface.",null,null],[6,"FlattenedPathBuilder","","",null,null],[4,"Verb","","Enumeration corresponding to the [PathEvent](../../core/events/enum.PathEvent.html) enum\nwithout the parameters.",null,null],[13,"MoveTo","","",59,null],[13,"LineTo","","",59,null],[13,"QuadraticTo","","",59,null],[13,"CubicTo","","",59,null],[13,"Close","","",59,null],[3,"PathIter","","",null,null],[3,"Path","","A simple path data structure.",null,null],[5,"flattened_path_builder","","FlattenedPathBuilder constructor.",null,{"inputs":[{"name":"f32"}],"output":{"name":"svgpathbuilder"}}],[11,"new","lyon_path_builder::path_builder","",63,{"inputs":[{"name":"builder"},{"name":"f32"}],"output":{"name":"flatteningbuilder"}}],[11,"set_tolerance","","",63,null],[11,"new","","",64,{"inputs":[{"name":"builder"}],"output":{"name":"svgpathbuilder"}}],[11,"move_to","","",64,null],[11,"line_to","","",64,null],[11,"close","","",64,null],[11,"current_position","","",64,null],[11,"build","","",64,null],[11,"build_and_reset","","",64,null],[11,"quadratic_bezier_to","","",64,null],[11,"cubic_bezier_to","","",64,null],[11,"relative_move_to","","",64,null],[11,"relative_line_to","","",64,null],[11,"relative_quadratic_bezier_to","","",64,null],[11,"relative_cubic_bezier_to","","",64,null],[11,"smooth_cubic_bezier_to","","",64,null],[11,"smooth_relative_cubic_bezier_to","","",64,null],[11,"smooth_quadratic_bezier_to","","",64,null],[11,"smooth_relative_quadratic_bezier_to","","",64,null],[11,"horizontal_line_to","","",64,null],[11,"relative_horizontal_line_to","","",64,null],[11,"vertical_line_to","","",64,null],[11,"relative_vertical_line_to","","",64,null],[11,"arc_to","","",64,null],[11,"relative_arc_to","","",64,null],[11,"move_to","","",63,null],[11,"line_to","","",63,null],[11,"close","","",63,null],[11,"current_position","","",63,null],[11,"build","","",63,null],[11,"build_and_reset","","",63,null],[11,"quadratic_bezier_to","","",63,null],[11,"cubic_bezier_to","","",63,null],[3,"FlatteningBuilder","lyon::path_builder","Generates flattened paths",null,null],[3,"SvgPathBuilder","","Implements the Svg building interface on top of a PathBuilder.",null,null],[8,"BaseBuilder","","The most basic path building interface. Does not handle any kind of curve.",null,null],[16,"PathType","","The type of object that is created by this builder.",65,null],[10,"move_to","","Sets the current position in preparation for the next sub-path.\nIf the current sub-path contains edges, this ends the sub-path without closing it.",65,null],[10,"line_to","","Adds a line segment to the current sub-path and set the current position.",65,null],[10,"close","","Closes the current sub path and sets the current position to the first position of\nthis the current sub-path.",65,null],[10,"build","","Builds a path object and resets the builder so that it can be used again.",65,null],[10,"build_and_reset","","Builds a path object and resets the builder so that it can be used again.",65,null],[10,"current_position","","",65,null],[11,"flat_event","","",65,null],[11,"flattened","","Returns a builder that approximates all curves with sequences of line segments.",65,null],[8,"PolygonBuilder","","Build a path from a simple list of points.",null,null],[10,"polygon","","",66,null],[8,"SvgBuilder","","A path building interface that tries to stay close to SVG&#39;s path specification.\nhttps://svgwg.org/specs/paths/",null,null],[10,"relative_move_to","","",67,null],[10,"relative_line_to","","",67,null],[10,"relative_quadratic_bezier_to","","",67,null],[10,"relative_cubic_bezier_to","","",67,null],[10,"smooth_cubic_bezier_to","","",67,null],[10,"smooth_relative_cubic_bezier_to","","",67,null],[10,"smooth_quadratic_bezier_to","","",67,null],[10,"smooth_relative_quadratic_bezier_to","","",67,null],[10,"horizontal_line_to","","",67,null],[10,"relative_horizontal_line_to","","",67,null],[10,"vertical_line_to","","",67,null],[10,"relative_vertical_line_to","","",67,null],[10,"arc_to","","",67,null],[10,"relative_arc_to","","",67,null],[11,"svg_event","","",67,null],[8,"PathBuilder","","The main path building interface. More elaborate interfaces are built on top\nof the provided primitives.",null,null],[10,"quadratic_bezier_to","","",68,null],[10,"cubic_bezier_to","","",68,null],[11,"path_event","","",68,null],[11,"with_svg","","Returns a builder that support svg commands.",68,null],[11,"eq","lyon_path_iterator::path_iterator","",69,null],[11,"ne","","",69,null],[11,"fmt","","",69,null],[11,"clone","","",69,null],[11,"new","","Constructor.",70,{"inputs":[{"name":"pathit"}],"output":{"name":"segmentiterator"}}],[11,"next","","",70,null],[11,"new","","",71,{"inputs":[{"name":"svgiter"}],"output":{"name":"svgtopathiter"}}],[11,"get_state","","",71,null],[11,"next","","",71,null],[11,"new","","Create the iterator.",72,{"inputs":[{"name":"f32"},{"name":"iter"}],"output":{"name":"flatteningiter"}}],[11,"get_state","","",72,null],[11,"next","","",72,null],[11,"new","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"pathstatesvgiter"}}],[11,"get_state","","",73,null],[11,"next","","",73,null],[11,"new","","",74,{"inputs":[{"name":"iter"}],"output":{"name":"pathstateiter"}}],[11,"get_state","","",74,null],[11,"next","","",74,null],[8,"FlattenedIterator","lyon::path_iterator","An extension to the common Iterator interface, that adds information which is useful when\nchaining path-specific iterators.",null,null],[10,"get_state","","The returned structure exposes the current position, the first position in the current\nsub-path, and the position of the last control point.",75,null],[11,"path_iter","","Returns an iterator of path events.",75,null],[11,"svg_iter","","Returns an iterator of svg events.",75,null],[4,"Segment","","Convenience for algorithms which prefer to iterate over segments directly rather than\npath events.",null,null],[13,"Line","","",69,null],[13,"QuadraticBezier","","",69,null],[13,"CubicBezier","","",69,null],[3,"SvgToPathIter","","",null,null],[3,"SegmentIterator","","Consumes an iterator of path events and yields segments.",null,null],[3,"PathStateIter","","An adapater iterator that implements PathIterator on top of an Iterator&lt;Item=PatheEvent&gt;.",null,null],[8,"PathIterator","","An extension to the common Iterator interface, that adds information which is useful when\nchaining path-specific iterators.",null,null],[10,"get_state","","The returned structure exposes the current position, the first position in the current\nsub-path, and the position of the last control point.",76,null],[11,"flattened","","Returns an iterator that turns curves into line segments.",76,null],[11,"svg_iter","","Returns an iterator of SVG events.",76,null],[3,"PathStateSvgIter","","An adapater iterator that implements SvgIterator on top of an Iterator&lt;Item=SvgEvent&gt;.",null,null],[3,"FlatteningIter","","An iterator that consumes an PathIterator and yields FlattenedEvents.",null,null],[8,"SvgIterator","","An extension to the common Iterator interface, that adds information which is useful when\nchaining path-specific iterators.",null,null],[10,"get_state","","The returned structure exposes the current position, the first position in the current\nsub-path, and the position of the last control point.",77,null],[11,"flattened","","Returns an iterator of FlattenedEvents, turning curves into sequences of line segments.",77,null],[11,"path_iter","","Returns an iterator of path events.",77,null],[11,"new","lyon_bezier::flatten_cubic","Creates an iterator that yields points along a cubic bezier segment, useful to build a\nflattened approximation of the curve given a certain tolerance.",78,{"inputs":[{"name":"cubicbeziersegment"},{"name":"f32"}],"output":{"name":"cubicflatteningiter"}}],[11,"next","","",78,null],[11,"fmt","lyon_bezier","",79,null],[11,"clone","","",79,null],[11,"sample","","",79,null],[11,"sample_x","","",79,null],[11,"sample_y","","",79,null],[11,"flip","","",79,null],[11,"find_y_maximum","","Find the advancement of the y-most position in the curve.",79,null],[11,"find_y_inflection","","Return the y inflection point or None if this curve is y-monotone.",79,null],[11,"split","","Split this curve into two sub-curves.",79,null],[11,"before_split","","Return the curve before the split point.",79,null],[11,"after_split","","Return the curve after the split point.",79,null],[11,"to_cubic","","Elevate this curve to a third order bezier.",79,null],[11,"flattening_step","","Find the interval of the begining of the curve that can be approximated with a\nline segment.",79,null],[11,"flattened_for_each","","Iterates through the curve invoking a callback at each point.",79,null],[11,"flattening_iter","","Returns the flattened representation of the curve as an iterator, starting *after* the\ncurrent point.",79,null],[11,"new","","",80,{"inputs":[{"name":"quadraticbeziersegment"},{"name":"f32"}],"output":{"name":"quadraticflatteningiter"}}],[11,"next","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"sample","","",81,null],[11,"split","","Split this curve into two sub-curves.",81,null],[11,"before_split","","Return the curve before the split point.",81,null],[11,"after_split","","Return the curve after the split point.",81,null],[11,"flattening_iter","","Returns the flattened representation of the curve as an iterator, starting *after* the\ncurrent point.",81,null],[11,"flattened_for_each","","Iterates through the curve invoking a callback at each point.",81,null],[6,"Point","lyon::bezier","",null,null],[6,"Vec2","","",null,null],[3,"QuadraticBezierSegment","","",null,null],[12,"from","","",79,null],[12,"ctrl","","",79,null],[12,"to","","",79,null],[3,"QuadraticFlatteningIter","","",null,null],[3,"CubicBezierSegment","","",null,null],[12,"from","","",81,null],[12,"ctrl1","","",81,null],[12,"ctrl2","","",81,null],[12,"to","","",81,null],[3,"CubicFlatteningIter","","An iterator that expresses the linearization of a cubic bezier segment for given a tolerance\nthreshold.\nThe iterator starts at the first point *after* the origin of the curve and ends at the\ndestination.",null,null],[0,"rust_logo","lyon::extra","",null,null],[5,"build_logo_path","lyon::extra::rust_logo","",null,null],[0,"triangle_rasterizer","lyon::extra","",null,null],[5,"rasterize_triangles","lyon::extra::triangle_rasterizer","A software triangle rasterizer intended for ref testing and to help debugging\nthe output of the various tessellation routines.",null,null],[11,"interpolate","euclid::point","",15,{"inputs":[{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"typedpoint2d"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"typedpoint2d"}}],[11,"position","","",15,null],[11,"new","lyon_extra::image","",82,null],[11,"with_stride","","",82,null],[11,"get_size","","",82,null],[11,"get_stride","","",82,null],[11,"get_data","","",82,null],[11,"get_mut_data","","",82,null],[11,"pixel_offset","","",82,null],[11,"contains_pixel","","",82,null],[11,"split_vertically","","",82,null],[8,"PixelShader","lyon::extra::triangle_rasterizer","An operation that is applied to each rasterized pixel",null,null],[10,"shade","","",83,{"inputs":[{"name":"pixel"},{"name":"vertex"},{"name":"constants"}],"output":{"name":"pixel"}}],[8,"VertexData","","",null,null],[10,"interpolate","","",84,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[10,"position","","",84,null],[8,"GetColor","","Implemented vertices and constants that can return a color.",null,null],[10,"get_color","","",85,null],[0,"debugging","lyon::extra","",null,null],[6,"Polygons","lyon::extra::debugging","",null,null],[5,"path_to_polygons","","",null,{"inputs":[{"name":"pathslice"}],"output":{"name":"vec"}}],[5,"polygons_to_path","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"path"}}],[5,"find_reduced_test_case","","",null,{"inputs":[{"name":"pathslice"},{"name":"f"}],"output":{"name":"path"}}],[0,"image","lyon::extra","",null,null],[3,"MutableImageSlice","lyon::extra::image","A view on a writable image in memory.",null,null]],"paths":[[4,"FillError"],[3,"FillTessellator"],[3,"FillEvents"],[4,"FillRule"],[3,"FillOptions"],[3,"StrokeTessellator"],[3,"StrokeBuilder"],[3,"StrokeOptions"],[4,"LineCap"],[4,"LineJoin"],[3,"VertexId"],[3,"VertexBuffers"],[3,"BuffersBuilder"],[3,"Identity"],[3,"Count"],[3,"TypedPoint2D"],[3,"PathState"],[3,"_1"],[3,"_2"],[3,"_3"],[3,"_4"],[3,"_5"],[3,"_6"],[3,"_7"],[3,"_8"],[3,"_9"],[3,"_10"],[3,"_11"],[3,"_12"],[3,"_13"],[3,"_14"],[3,"_15"],[3,"_16"],[3,"_24"],[3,"_32"],[3,"Fp64"],[3,"Fp32"],[4,"SvgEvent"],[4,"PathEvent"],[4,"FlattenedEvent"],[8,"GeometryBuilder"],[8,"BezierGeometryBuilder"],[8,"VertexConstructor"],[3,"ArcFlags"],[8,"Vec2Array"],[8,"Vec2Length"],[8,"Vec2SquareLength"],[3,"Length"],[3,"TypedMatrix2D"],[3,"TypedMatrix4D"],[3,"TypedPoint3D"],[3,"TypedPoint4D"],[3,"TypedRect"],[3,"ScaleFactor"],[3,"TypedSideOffsets2D"],[3,"TypedSize2D"],[3,"UnknownUnit"],[8,"FractionalBits"],[3,"PathSlice"],[4,"Verb"],[3,"Path"],[3,"Builder"],[3,"PathIter"],[3,"FlatteningBuilder"],[3,"SvgPathBuilder"],[8,"BaseBuilder"],[8,"PolygonBuilder"],[8,"SvgBuilder"],[8,"PathBuilder"],[4,"Segment"],[3,"SegmentIterator"],[3,"SvgToPathIter"],[3,"FlatteningIter"],[3,"PathStateSvgIter"],[3,"PathStateIter"],[8,"FlattenedIterator"],[8,"PathIterator"],[8,"SvgIterator"],[3,"CubicFlatteningIter"],[3,"QuadraticBezierSegment"],[3,"QuadraticFlatteningIter"],[3,"CubicBezierSegment"],[3,"MutableImageSlice"],[8,"PixelShader"],[8,"VertexData"],[8,"GetColor"]]};
searchIndex["lyon_tessellation"] = {"doc":"# Lyon Tessellation","items":[[0,"basic_shapes","lyon_tessellation","Tessellation routines for simple shapes.",null,null],[3,"RoundedRect","lyon_tessellation::basic_shapes","",null,null],[5,"add_triangle","","Add a triangle to a geometry.",null,{"inputs":[{"name":"point"},{"name":"point"},{"name":"point"},{"name":"output"}],"output":null}],[5,"tessellate_triangle","","Tessellate a simple triangle geometry.",null,{"inputs":[{"name":"point"},{"name":"point"},{"name":"point"},{"name":"output"}],"output":{"name":"count"}}],[5,"add_quad","","Add a quad to a geometry.",null,{"inputs":[{"name":"point"},{"name":"point"},{"name":"point"},{"name":"point"},{"name":"output"}],"output":null}],[5,"tessellate_quad","","Tessellate a simple quad geometry.",null,{"inputs":[{"name":"point"},{"name":"point"},{"name":"point"},{"name":"point"},{"name":"output"}],"output":{"name":"count"}}],[5,"add_rectangle","","Add a Rect to a geometry.",null,{"inputs":[{"name":"rect"},{"name":"output"}],"output":null}],[5,"tessellate_rectangle","","Tessellate a simple Rect.",null,{"inputs":[{"name":"rect"},{"name":"output"}],"output":{"name":"count"}}],[5,"add_rounded_rectangle","","Add a rounded reactangle to a geometry.",null,{"inputs":[{"name":"roundedrect"},{"name":"output"}],"output":{"name":"count"}}],[5,"tessellate_rounded_rectangle","","Tessellate a simple rounded rectangle.",null,{"inputs":[{"name":"roundedrect"},{"name":"output"}],"output":{"name":"count"}}],[5,"tessellate_ellipsis","","Tessellate a simple ellipsis.",null,{"inputs":[{"name":"point"},{"name":"vec2"},{"name":"u32"},{"name":"output"}],"output":{"name":"count"}}],[0,"path_fill","lyon_tessellation","# Path fill tessellator",null,null],[3,"FillTessellator","lyon_tessellation::path_fill","A Context object that can tessellate fill operations for complex paths.",null,null],[3,"FillEvents","","A sequence of edges sorted from top to bottom, to be used as the tessellator&#39;s input.",null,null],[3,"FillOptions","","Parameters for the tessellator.",null,null],[12,"tolerance","","Maximum allowed distance to the path when building an approximation.",0,null],[12,"fill_rule","","See the SVG specification.",0,null],[12,"vertex_aa","","An anti-aliasing trick extruding a 1-px wide strip around the edges with\na gradient to smooth the edges.",0,null],[4,"FillError","","The fill tessellator&#39;s error enumeration.",null,null],[13,"Unknown","","",1,null],[4,"FillRule","","The fill rule defines how to determine what is inside and what is outside of the shape.",null,null],[13,"EvenOdd","","",2,null],[13,"NonZero","","",2,null],[6,"FillResult","","The fill tessellator&#39;s result type.",null,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"new","","Constructor.",3,{"inputs":[],"output":{"name":"filltessellator"}}],[11,"tessellate_events","","Compute the tessellation.",3,null],[11,"enable_logging","","Enable some verbose logging during the tessellation, for debugging purposes.",3,null],[11,"from_iter","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"self"}}],[11,"eq","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"default","","",0,{"inputs":[],"output":{"name":"filloptions"}}],[11,"even_odd","","",0,{"inputs":[],"output":{"name":"filloptions"}}],[11,"non_zero","","",0,{"inputs":[],"output":{"name":"filloptions"}}],[11,"with_tolerance","","",0,null],[11,"with_vertex_aa","","",0,null],[0,"path_stroke","lyon_tessellation","## Path stroke tessellator",null,null],[3,"StrokeTessellator","lyon_tessellation::path_stroke","A Context object that can tessellate stroke operations for complex paths.",null,null],[3,"StrokeBuilder","","A builder that tessellates a stroke directly without allocating any intermediate data structure.",null,null],[3,"StrokeOptions","","Parameters for the tessellator.",null,null],[12,"stroke_width","","Thickness of the stroke.",5,null],[12,"line_cap","","See the SVG secification.",5,null],[12,"line_join","","See the SVG secification.",5,null],[12,"miter_limit","","See the SVG secification.",5,null],[12,"tolerance","","Maximum allowed distance to the path when building an approximation.",5,null],[12,"vertex_aa","","An anti-aliasing trick extruding a 1-px wide strip around the edges with\na gradient to smooth the edges.",5,null],[4,"LineCap","","Line cap as defined by the SVG specification.",null,null],[13,"Butt","","",6,null],[13,"Square","","",6,null],[13,"Round","","",6,null],[4,"LineJoin","","Line join as defined by the SVG specification.",null,null],[13,"Miter","","",7,null],[13,"MiterClip","","",7,null],[13,"Round","","",7,null],[13,"Bevel","","",7,null],[13,"Arcs","","",7,null],[6,"StrokeResult","","",null,null],[11,"new","","",8,{"inputs":[],"output":{"name":"stroketessellator"}}],[11,"tessellate","","",8,null],[11,"move_to","","",9,null],[11,"line_to","","",9,null],[11,"close","","",9,null],[11,"current_position","","",9,null],[11,"build","","",9,null],[11,"build_and_reset","","",9,null],[11,"new","","",9,{"inputs":[{"name":"strokeoptions"},{"name":"output"}],"output":{"name":"self"}}],[11,"set_options","","",9,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"stroke_width","","",5,{"inputs":[{"name":"f32"}],"output":{"name":"strokeoptions"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"strokeoptions"}}],[11,"with_tolerance","","",5,null],[11,"with_line_cap","","",5,null],[11,"with_line_join","","",5,null],[11,"with_miter_limit","","",5,null],[11,"with_stroke_width","","",5,null],[11,"with_vertex_aa","","",5,null],[11,"eq","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"eq","","",7,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[0,"geometry_builder","lyon_tessellation","# Geometry builder",null,null],[3,"VertexId","lyon_tessellation::geometry_builder","A virtual vertex offset in a geometry.",null,null],[12,"0","","",10,null],[3,"VertexBuffers","","Structure that holds the vertex and index data.",null,null],[12,"vertices","","",11,null],[12,"indices","","",11,null],[3,"BuffersBuilder","","A temporary view on a VertexBuffers object which facilitate the population of vertex and index\ndata.",null,null],[3,"Identity","","A dummy vertex constructor that just forwards its inputs.",null,null],[3,"Count","","Number of vertices and indices added during the tessellation.",null,null],[5,"vertex_builder","","Creates a BuffersBuilder.",null,{"inputs":[{"name":"vertexbuffers"},{"name":"ctor"}],"output":{"name":"buffersbuilder"}}],[5,"simple_builder","","Creates a SimpleBuffersBuilder.",null,{"inputs":[{"name":"vertexbuffers"}],"output":{"name":"simplebuffersbuilder"}}],[6,"Index","","",null,null],[6,"SimpleBuffersBuilder","","A BuffersBuilder that takes the actual vertex type as input.",null,null],[8,"GeometryBuilder","","An interface separating tessellators and other geometry generation algorithms from the\nactual vertex construction.",null,null],[10,"begin_geometry","","Called at the beginning of a generation.",12,null],[10,"end_geometry","","Called at the end of a generation.\nReturns the number of vertices and indices added since the last time begin_geometry was\ncalled.",12,null],[10,"add_vertex","","Inserts a vertex, providing its position, and optionally a normal.\nRetuns a vertex id that is only valid between begin_geometry and end_geometry.",12,null],[10,"add_triangle","","Insert a triangle made of vertices that were added after the last call to begin_geometry.",12,null],[10,"abort_geometry","","abort_geometry is called instead of end_geometry if an error occured while producing\nthe geometry and we won&#39;t be able to finish.",12,null],[8,"BezierGeometryBuilder","","An extension to GeometryBuilder that can handle quadratic bezier segments.",null,null],[10,"add_quadratic_bezier","","Insert a quadratic bezier curve.\nThe interrior is on the right side of the curve.",13,null],[8,"VertexConstructor","","A trait specifying how to create vertex values.",null,null],[10,"new_vertex","","",14,null],[11,"hash","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"offset","","",10,null],[11,"new","","Constructor",11,{"inputs":[],"output":{"name":"vertexbuffers"}}],[11,"with_capacity","","Constructor",11,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"vertexbuffers"}}],[11,"new","","",15,{"inputs":[{"name":"vertexbuffers"},{"name":"ctor"}],"output":{"name":"buffersbuilder"}}],[11,"new_vertex","","",16,null],[11,"hash","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"add","","",17,null],[11,"begin_geometry","","",15,null],[11,"end_geometry","","",15,null],[11,"add_vertex","","",15,null],[11,"add_triangle","","",15,null],[11,"abort_geometry","","",15,null],[11,"add_quadratic_bezier","","",15,null]],"paths":[[3,"FillOptions"],[4,"FillError"],[4,"FillRule"],[3,"FillTessellator"],[3,"FillEvents"],[3,"StrokeOptions"],[4,"LineCap"],[4,"LineJoin"],[3,"StrokeTessellator"],[3,"StrokeBuilder"],[3,"VertexId"],[3,"VertexBuffers"],[8,"GeometryBuilder"],[8,"BezierGeometryBuilder"],[8,"VertexConstructor"],[3,"BuffersBuilder"],[3,"Identity"],[3,"Count"]]};
searchIndex["lyon_extra"] = {"doc":"","items":[[0,"rust_logo","lyon_extra","",null,null],[5,"build_logo_path","lyon_extra::rust_logo","",null,{"inputs":[{"name":"builder"}],"output":null}],[0,"triangle_rasterizer","lyon_extra","",null,null],[5,"rasterize_triangles","lyon_extra::triangle_rasterizer","A software triangle rasterizer intended for ref testing and to help debugging\nthe output of the various tessellation routines.",null,null],[8,"PixelShader","","An operation that is applied to each rasterized pixel",null,null],[10,"shade","","",0,{"inputs":[{"name":"pixel"},{"name":"vertex"},{"name":"constants"}],"output":{"name":"pixel"}}],[8,"VertexData","","",null,null],[10,"interpolate","","",1,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[10,"position","","",1,null],[8,"GetColor","","Implemented vertices and constants that can return a color.",null,null],[10,"get_color","","",2,null],[11,"interpolate","","",3,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"vec2"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vec2"}}],[11,"position","","",3,null],[0,"debugging","lyon_extra","",null,null],[5,"path_to_polygons","lyon_extra::debugging","",null,{"inputs":[{"name":"pathslice"}],"output":{"name":"vec"}}],[5,"polygons_to_path","","",null,{"inputs":[{"name":"polygons"}],"output":{"name":"path"}}],[5,"find_reduced_test_case","","",null,{"inputs":[{"name":"pathslice"},{"name":"f"}],"output":{"name":"path"}}],[6,"Polygons","","",null,null],[0,"image","lyon_extra","",null,null],[3,"MutableImageSlice","lyon_extra::image","A view on a writable image in memory.",null,null],[11,"new","","",4,null],[11,"with_stride","","",4,null],[11,"get_size","","",4,null],[11,"get_stride","","",4,null],[11,"get_data","","",4,null],[11,"get_mut_data","","",4,null],[11,"pixel_offset","","",4,null],[11,"contains_pixel","","",4,null],[11,"split_vertically","","",4,null]],"paths":[[8,"PixelShader"],[8,"VertexData"],[8,"GetColor"],[6,"Vec2"],[3,"MutableImageSlice"]]};
searchIndex["lyon_path"] = {"doc":"# Lyon path","items":[[3,"Path","lyon_path","A simple path data structure.",null,null],[3,"PathSlice","","",null,null],[3,"Builder","","Builds path object using the BaseBuilder interface.",null,null],[3,"PathIter","","",null,null],[4,"Verb","","Enumeration corresponding to the [PathEvent](../../core/events/enum.PathEvent.html) enum\nwithout the parameters.",null,null],[13,"MoveTo","","",0,null],[13,"LineTo","","",0,null],[13,"QuadraticTo","","",0,null],[13,"CubicTo","","",0,null],[13,"Close","","",0,null],[5,"flattened_path_builder","","FlattenedPathBuilder constructor.",null,{"inputs":[{"name":"f32"}],"output":{"name":"flattenedpathbuilder"}}],[11,"eq","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"builder","","Creates a [Builder](struct.Builder.html) to create a path.",1,{"inputs":[],"output":{"name":"builder"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"path"}}],[11,"with_capacity","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"path"}}],[11,"as_slice","","",1,null],[11,"iter","","",1,null],[11,"path_iter","","",1,null],[11,"points","","",1,null],[11,"mut_points","","",1,null],[11,"verbs","","",1,null],[11,"new","","",2,null],[11,"iter","","",2,null],[11,"path_iter","","",2,null],[11,"points","","",2,null],[11,"verbs","","",2,null],[11,"new","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_svg","","",3,null],[11,"flattened","","",3,null],[11,"move_to","","",3,null],[11,"line_to","","",3,null],[11,"close","","",3,null],[11,"current_position","","",3,null],[11,"build","","",3,null],[11,"build_and_reset","","",3,null],[11,"quadratic_bezier_to","","",3,null],[11,"cubic_bezier_to","","",3,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"new","","",4,null],[11,"next","","",4,null],[6,"FlattenedPathBuilder","","Builder for flattened paths",null,null]],"paths":[[4,"Verb"],[3,"Path"],[3,"PathSlice"],[3,"Builder"],[3,"PathIter"]]};
searchIndex["lyon_path_iterator"] = {"doc":"# Lyon path builder","items":[[3,"SegmentIterator","lyon_path_iterator","Consumes an iterator of path events and yields segments.",null,null],[3,"SvgToPathIter","","",null,null],[3,"FlatteningIter","","An iterator that consumes an PathIterator and yields FlattenedEvents.",null,null],[3,"PathStateSvgIter","","An adapater iterator that implements SvgIterator on top of an Iterator&lt;Item=SvgEvent&gt;.",null,null],[3,"PathStateIter","","An adapater iterator that implements PathIterator on top of an Iterator&lt;Item=PatheEvent&gt;.",null,null],[4,"Segment","","Convenience for algorithms which prefer to iterate over segments directly rather than\npath events.",null,null],[13,"Line","","",0,null],[13,"QuadraticBezier","","",0,null],[13,"CubicBezier","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"new","","Constructor.",1,{"inputs":[{"name":"pathit"}],"output":{"name":"self"}}],[11,"next","","",1,null],[11,"new","","",2,{"inputs":[{"name":"svgiter"}],"output":{"name":"self"}}],[11,"get_state","","",2,null],[11,"next","","",2,null],[11,"new","","Create the iterator.",3,{"inputs":[{"name":"f32"},{"name":"iter"}],"output":{"name":"self"}}],[11,"get_state","","",3,null],[11,"next","","",3,null],[11,"new","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"self"}}],[11,"get_state","","",4,null],[11,"next","","",4,null],[11,"new","","",5,{"inputs":[{"name":"iter"}],"output":{"name":"self"}}],[11,"get_state","","",5,null],[11,"next","","",5,null],[8,"PathIterator","","An extension to the common Iterator interface, that adds information which is useful when\nchaining path-specific iterators.",null,null],[10,"get_state","","The returned structure exposes the current position, the first position in the current\nsub-path, and the position of the last control point.",6,null],[11,"flattened","","Returns an iterator that turns curves into line segments.",6,null],[11,"svg_iter","","Returns an iterator of SVG events.",6,null],[8,"SvgIterator","","An extension to the common Iterator interface, that adds information which is useful when\nchaining path-specific iterators.",null,null],[10,"get_state","","The returned structure exposes the current position, the first position in the current\nsub-path, and the position of the last control point.",7,null],[11,"flattened","","Returns an iterator of FlattenedEvents, turning curves into sequences of line segments.",7,null],[11,"path_iter","","Returns an iterator of path events.",7,null],[8,"FlattenedIterator","","An extension to the common Iterator interface, that adds information which is useful when\nchaining path-specific iterators.",null,null],[10,"get_state","","The returned structure exposes the current position, the first position in the current\nsub-path, and the position of the last control point.",8,null],[11,"path_iter","","Returns an iterator of path events.",8,null],[11,"svg_iter","","Returns an iterator of svg events.",8,null],[11,"flattened","","Returns an iterator that turns curves into line segments.",6,null],[11,"svg_iter","","Returns an iterator of SVG events.",6,null],[11,"flattened","","Returns an iterator of FlattenedEvents, turning curves into sequences of line segments.",7,null],[11,"path_iter","","Returns an iterator of path events.",7,null],[11,"path_iter","","Returns an iterator of path events.",8,null],[11,"svg_iter","","Returns an iterator of svg events.",8,null]],"paths":[[4,"Segment"],[3,"SegmentIterator"],[3,"SvgToPathIter"],[3,"FlatteningIter"],[3,"PathStateSvgIter"],[3,"PathStateIter"],[8,"PathIterator"],[8,"SvgIterator"],[8,"FlattenedIterator"]]};
searchIndex["lyon_path_builder"] = {"doc":"# Lyon path builder","items":[[3,"SvgPathBuilder","lyon_path_builder","Implements the Svg building interface on top of a PathBuilder.",null,null],[3,"FlatteningBuilder","","Generates flattened paths",null,null],[11,"new","","",0,{"inputs":[{"name":"builder"}],"output":{"name":"svgpathbuilder"}}],[11,"move_to","","",0,null],[11,"line_to","","",0,null],[11,"close","","",0,null],[11,"current_position","","",0,null],[11,"build","","",0,null],[11,"build_and_reset","","",0,null],[11,"quadratic_bezier_to","","",0,null],[11,"cubic_bezier_to","","",0,null],[11,"relative_move_to","","",0,null],[11,"relative_line_to","","",0,null],[11,"relative_quadratic_bezier_to","","",0,null],[11,"relative_cubic_bezier_to","","",0,null],[11,"smooth_cubic_bezier_to","","",0,null],[11,"smooth_relative_cubic_bezier_to","","",0,null],[11,"smooth_quadratic_bezier_to","","",0,null],[11,"smooth_relative_quadratic_bezier_to","","",0,null],[11,"horizontal_line_to","","",0,null],[11,"relative_horizontal_line_to","","",0,null],[11,"vertical_line_to","","",0,null],[11,"relative_vertical_line_to","","",0,null],[11,"arc_to","","",0,null],[11,"relative_arc_to","","",0,null],[11,"move_to","","",1,null],[11,"line_to","","",1,null],[11,"close","","",1,null],[11,"current_position","","",1,null],[11,"build","","",1,null],[11,"build_and_reset","","",1,null],[11,"quadratic_bezier_to","","",1,null],[11,"cubic_bezier_to","","",1,null],[11,"new","","",1,{"inputs":[{"name":"builder"},{"name":"f32"}],"output":{"name":"flatteningbuilder"}}],[11,"set_tolerance","","",1,null],[8,"BaseBuilder","","The most basic path building interface. Does not handle any kind of curve.",null,null],[16,"PathType","","The type of object that is created by this builder.",2,null],[10,"move_to","","Sets the current position in preparation for the next sub-path.\nIf the current sub-path contains edges, this ends the sub-path without closing it.",2,null],[10,"line_to","","Adds a line segment to the current sub-path and set the current position.",2,null],[10,"close","","Closes the current sub path and sets the current position to the first position of\nthis the current sub-path.",2,null],[10,"build","","Builds a path object and resets the builder so that it can be used again.",2,null],[10,"build_and_reset","","Builds a path object and resets the builder so that it can be used again.",2,null],[10,"current_position","","",2,null],[11,"flat_event","","",2,null],[11,"flattened","","Returns a builder that approximates all curves with sequences of line segments.",2,null],[8,"PathBuilder","","The main path building interface. More elaborate interfaces are built on top\nof the provided primitives.",null,null],[10,"quadratic_bezier_to","","",3,null],[10,"cubic_bezier_to","","",3,null],[11,"path_event","","",3,null],[11,"with_svg","","Returns a builder that support svg commands.",3,null],[8,"SvgBuilder","","A path building interface that tries to stay close to SVG&#39;s path specification.\nhttps://svgwg.org/specs/paths/",null,null],[10,"relative_move_to","","",4,null],[10,"relative_line_to","","",4,null],[10,"relative_quadratic_bezier_to","","",4,null],[10,"relative_cubic_bezier_to","","",4,null],[10,"smooth_cubic_bezier_to","","",4,null],[10,"smooth_relative_cubic_bezier_to","","",4,null],[10,"smooth_quadratic_bezier_to","","",4,null],[10,"smooth_relative_quadratic_bezier_to","","",4,null],[10,"horizontal_line_to","","",4,null],[10,"relative_horizontal_line_to","","",4,null],[10,"vertical_line_to","","",4,null],[10,"relative_vertical_line_to","","",4,null],[10,"arc_to","","",4,null],[10,"relative_arc_to","","",4,null],[11,"svg_event","","",4,null],[8,"PolygonBuilder","","Build a path from a simple list of points.",null,null],[10,"polygon","","",5,null],[11,"flat_event","","",2,null],[11,"flattened","","Returns a builder that approximates all curves with sequences of line segments.",2,null],[11,"path_event","","",3,null],[11,"with_svg","","Returns a builder that support svg commands.",3,null],[11,"svg_event","","",4,null]],"paths":[[3,"SvgPathBuilder"],[3,"FlatteningBuilder"],[8,"BaseBuilder"],[8,"PathBuilder"],[8,"SvgBuilder"],[8,"PolygonBuilder"]]};
searchIndex["lyon_core"] = {"doc":"","items":[[3,"ArcFlags","lyon_core","Flag parameters for arcs as described by the SVG specification.",null,null],[12,"large_arc","","",0,null],[12,"sweep","","",0,null],[0,"math","","",null,null],[11,"encode","euclid::length","",1,null],[11,"decode","","",1,{"inputs":[{"name":"__dtunit"}],"output":{"name":"result"}}],[11,"clone","","",1,null],[11,"heap_size_of_children","","",1,null],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",1,null],[11,"new","","",1,{"inputs":[{"name":"t"}],"output":{"name":"length"}}],[11,"get","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"div","","",1,null],[11,"mul","","",1,null],[11,"div","","",1,null],[11,"neg","","",1,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"zero","","",1,{"inputs":[],"output":{"name":"length"}}],[11,"clone","euclid::matrix2d","",2,null],[11,"heap_size_of_children","","",2,null],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",2,null],[11,"eq","","",2,null],[11,"hash","","",2,null],[11,"row_major","","Create a matrix specifying its components in row-major order.",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix2d"}}],[11,"column_major","","Create a matrix specifying its components in column-major order.",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix2d"}}],[11,"to_row_major_array","","Returns an array containing this matrix&#39;s terms in row-major order (the order\nin which the matrix is actually laid out in memory).",2,null],[11,"to_column_major_array","","Returns an array containing this matrix&#39;s terms in column-major order.",2,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",2,null],[11,"from_untyped","","Tag a unitless value with units.",2,{"inputs":[{"name":"typedmatrix2d"}],"output":{"name":"typedmatrix2d"}}],[11,"identity","","",2,{"inputs":[],"output":{"name":"typedmatrix2d"}}],[11,"post_mul","","Returns the multiplication of the two matrices such that mat&#39;s transformation\napplies after self&#39;s transformation.",2,null],[11,"pre_mul","","Returns the multiplication of the two matrices such that mat&#39;s transformation\napplies before self&#39;s transformation.",2,null],[11,"create_translation","","Returns a translation matrix.",2,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix2d"}}],[11,"post_translated","","Applies a translation after self&#39;s transformation and returns the resulting matrix.",2,null],[11,"pre_translated","","Applies a translation before self&#39;s transformation and returns the resulting matrix.",2,null],[11,"create_scale","","Returns a scale matrix.",2,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix2d"}}],[11,"post_scaled","","Applies a scale after self&#39;s transformation and returns the resulting matrix.",2,null],[11,"pre_scaled","","Applies a scale before self&#39;s transformation and returns the resulting matrix.",2,null],[11,"create_rotation","","Returns a rotation matrix.",2,{"inputs":[{"name":"length"}],"output":{"name":"typedmatrix2d"}}],[11,"post_rotated","","Applies a rotation after self&#39;s transformation and returns the resulting matrix.",2,null],[11,"pre_rotated","","Applies a rotation after self&#39;s transformation and returns the resulting matrix.",2,null],[11,"transform_point","","Returns the given point transformed by this matrix.",2,null],[11,"transform_rect","","Returns a rectangle that encompasses the result of transforming the given rectangle by this\nmatrix.",2,null],[11,"determinant","","Computes and returns the determinant of this matrix.",2,null],[11,"inverse","","Returns the inverse matrix if possible.",2,null],[11,"with_destination","","Returns the same matrix with a different destination unit.",2,null],[11,"with_source","","Returns the same matrix with a different source unit.",2,null],[11,"approx_eq","","",2,null],[11,"clone","euclid::matrix4d","",3,null],[11,"heap_size_of_children","","",3,null],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",3,null],[11,"eq","","",3,null],[11,"hash","","",3,null],[11,"row_major","","Create a matrix specifying its components in row-major order.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"column_major","","Create a matrix specifying its components in column-major order.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"row_major_2d","","Create a 4 by 4 matrix representing a 2d transformation, specifying its components\nin row-major order.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"ortho","","Create an orthogonal projection matrix.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"identity","","",3,{"inputs":[],"output":{"name":"typedmatrix4d"}}],[11,"is_2d","","Returns true if this matrix can be represented with a TypedMatrix2D.",3,null],[11,"to_2d","","Create a 2D matrix picking the relevent terms from this matrix.",3,null],[11,"approx_eq","","",3,null],[11,"with_destination","","Returns the same matrix with a different destination unit.",3,null],[11,"with_source","","Returns the same matrix with a different source unit.",3,null],[11,"post_mul","","Returns the multiplication of the two matrices such that mat&#39;s transformation\napplies after self&#39;s transformation.",3,null],[11,"pre_mul","","Returns the multiplication of the two matrices such that mat&#39;s transformation\napplies before self&#39;s transformation.",3,null],[11,"inverse","","Returns the inverse matrix if possible.",3,null],[11,"determinant","","Compute the determinant of the matrix.",3,null],[11,"mul_s","","Multiplies all of the matrix&#39;s component by a scalar and returns the result.",3,null],[11,"from_scale_factor","","Convenience function to create a scale matrix from a ScaleFactor.",3,{"inputs":[{"name":"scalefactor"}],"output":{"name":"typedmatrix4d"}}],[11,"transform_point","","Returns the given 2d point transformed by this matrix.",3,null],[11,"transform_point3d","","Returns the given 3d point transformed by this matrix.",3,null],[11,"transform_point4d","","Returns the given 4d point transformed by this matrix.",3,null],[11,"create_translation","","Create a 3d translation matrix",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"pre_translated","","Returns a matrix with a translation applied before self&#39;s transformation.",3,null],[11,"post_translated","","Returns a matrix with a translation applied after self&#39;s transformation.",3,null],[11,"create_scale","","Create a 3d scale matrix",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"pre_scaled","","Returns a matrix with a scale applied before self&#39;s transformation.",3,null],[11,"post_scaled","","Returns a matrix with a scale applied after self&#39;s transformation.",3,null],[11,"create_rotation","","Create a 3d rotation matrix from an angle / axis.\nThe supplied axis must be normalized.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"length"}],"output":{"name":"typedmatrix4d"}}],[11,"post_rotated","","Returns a matrix with a rotation applied after self&#39;s transformation.",3,null],[11,"pre_rotated","","Returns a matrix with a rotation applied before self&#39;s transformation.",3,null],[11,"create_skew","","Create a 2d skew matrix.",3,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"typedmatrix4d"}}],[11,"create_perspective","","Create a simple perspective projection matrix",3,{"inputs":[{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"to_row_major_array","","Returns an array containing this matrix&#39;s terms in row-major order (the order\nin which the matrix is actually laid out in memory).",3,null],[11,"to_column_major_array","","Returns an array containing this matrix&#39;s terms in column-major order.",3,null],[11,"to_row_arrays","","Returns an array containing this matrix&#39;s 4 rows in (in row-major order)\nas arrays.",3,null],[11,"to_column_arrays","","Returns an array containing this matrix&#39;s 4 columns in (in row-major order,\nor 4 rows in column-major order) as arrays.",3,null],[11,"fmt","","",3,null],[11,"encode","euclid::point","",4,null],[11,"decode","","",4,{"inputs":[{"name":"__dtu"}],"output":{"name":"result"}}],[11,"clone","","",4,null],[11,"heap_size_of_children","","",4,null],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",4,null],[11,"eq","","",4,null],[11,"hash","","",4,null],[11,"zero","","Constructor, setting all components to zero.",4,{"inputs":[],"output":{"name":"typedpoint2d"}}],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"new","","Constructor taking scalar values directly.",4,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedpoint2d"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",4,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"typedpoint2d"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",4,null],[11,"y_typed","","Returns self.y as a Length carrying the unit.",4,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",4,null],[11,"from_untyped","","Tag a unitless value with units.",4,{"inputs":[{"name":"typedpoint2d"}],"output":{"name":"typedpoint2d"}}],[11,"to_array","","",4,null],[11,"dot","","Dot product.",4,null],[11,"cross","","Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0]..",4,null],[11,"add","","",4,null],[11,"add","","",4,null],[11,"add_size","","",4,null],[11,"sub","","",4,null],[11,"neg","","",4,null],[11,"min","","",4,null],[11,"max","","",4,null],[11,"mul","","",4,null],[11,"div","","",4,null],[11,"mul","","",4,null],[11,"div","","",4,null],[11,"round","","Rounds each component to the nearest integer value.",4,null],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the orginal value.",4,null],[11,"floor","","Rounds each component to the biggest integer equal or lower than the orginal value.",4,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",4,null],[11,"to_f32","","Cast into an f32 vector.",4,null],[11,"to_uint","","Cast into an usize point, truncating decimals if any.",4,null],[11,"to_i32","","Cast into an i32 point, truncating decimals if any.",4,null],[11,"to_i64","","Cast into an i64 point, truncating decimals if any.",4,null],[11,"encode","","",5,null],[11,"decode","","",5,{"inputs":[{"name":"__dtu"}],"output":{"name":"result"}}],[11,"clone","","",5,null],[11,"heap_size_of_children","","",5,null],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",5,null],[11,"eq","","",5,null],[11,"hash","","",5,null],[11,"zero","","Constructor, setting all copmonents to zero.",5,{"inputs":[],"output":{"name":"typedpoint3d"}}],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"new","","Constructor taking scalar values directly.",5,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedpoint3d"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",5,{"inputs":[{"name":"length"},{"name":"length"},{"name":"length"}],"output":{"name":"typedpoint3d"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",5,null],[11,"y_typed","","Returns self.y as a Length carrying the unit.",5,null],[11,"z_typed","","Returns self.z as a Length carrying the unit.",5,null],[11,"to_array","","",5,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",5,null],[11,"from_untyped","","Tag a unitless value with units.",5,{"inputs":[{"name":"typedpoint3d"}],"output":{"name":"typedpoint3d"}}],[11,"dot","","",5,null],[11,"cross","","",5,null],[11,"add","","",5,null],[11,"sub","","",5,null],[11,"neg","","",5,null],[11,"min","","",5,null],[11,"max","","",5,null],[11,"round","","Rounds each component to the nearest integer value.",5,null],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the orginal value.",5,null],[11,"floor","","Rounds each component to the biggest integer equal or lower than the orginal value.",5,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",5,null],[11,"to_f32","","Cast into an f32 vector.",5,null],[11,"to_uint","","Cast into an usize point, truncating decimals if any.",5,null],[11,"to_i32","","Cast into an i32 point, truncating decimals if any.",5,null],[11,"to_i64","","Cast into an i64 point, truncating decimals if any.",5,null],[11,"encode","","",6,null],[11,"decode","","",6,{"inputs":[{"name":"__dtu"}],"output":{"name":"result"}}],[11,"clone","","",6,null],[11,"heap_size_of_children","","",6,null],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",6,null],[11,"eq","","",6,null],[11,"hash","","",6,null],[11,"zero","","Constructor, setting all copmonents to zero.",6,{"inputs":[],"output":{"name":"typedpoint4d"}}],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"new","","Constructor taking scalar values directly.",6,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedpoint4d"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",6,{"inputs":[{"name":"length"},{"name":"length"},{"name":"length"},{"name":"length"}],"output":{"name":"typedpoint4d"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",6,null],[11,"y_typed","","Returns self.y as a Length carrying the unit.",6,null],[11,"z_typed","","Returns self.z as a Length carrying the unit.",6,null],[11,"w_typed","","Returns self.w as a Length carrying the unit.",6,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",6,null],[11,"from_untyped","","Tag a unitless value with units.",6,{"inputs":[{"name":"typedpoint4d"}],"output":{"name":"typedpoint4d"}}],[11,"to_array","","",6,null],[11,"to_2d","","Convert into a 2d point.",6,null],[11,"to_3d","","Convert into a 3d point.",6,null],[11,"add","","",6,null],[11,"sub","","",6,null],[11,"neg","","",6,null],[11,"min","","",6,null],[11,"max","","",6,null],[11,"round","","Rounds each component to the nearest integer value.",6,null],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the orginal value.",6,null],[11,"floor","","Rounds each component to the biggest integer equal or lower than the orginal value.",6,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",6,null],[11,"to_f32","","Cast into an f32 vector.",6,null],[11,"to_uint","","Cast into an usize point, truncating decimals if any.",6,null],[11,"to_i32","","Cast into an i32 point, truncating decimals if any.",6,null],[11,"to_i64","","Cast into an i64 point, truncating decimals if any.",6,null],[11,"encode","euclid::rect","",7,null],[11,"decode","","",7,{"inputs":[{"name":"__dtu"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",7,null],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",7,null],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"new","","Constructor.",7,{"inputs":[{"name":"typedpoint2d"},{"name":"typedsize2d"}],"output":{"name":"typedrect"}}],[11,"intersects","","",7,null],[11,"max_x","","",7,null],[11,"min_x","","",7,null],[11,"max_y","","",7,null],[11,"min_y","","",7,null],[11,"max_x_typed","","",7,null],[11,"min_x_typed","","",7,null],[11,"max_y_typed","","",7,null],[11,"min_y_typed","","",7,null],[11,"intersection","","",7,null],[11,"translate","","Translates the rect by a vector.",7,null],[11,"contains","","Returns true if this rectangle contains the point. Points are considered\nin the rectangle if they are on the left or top edge, but outside if they\nare on the right or bottom edge.",7,null],[11,"contains_rect","","Returns true if this rectangle contains the interior of rect. Always\nreturns true if rect is empty, and always returns false if rect is\nnonempty but this rectangle is empty.",7,null],[11,"inflate","","",7,null],[11,"inflate_typed","","",7,null],[11,"top_right","","",7,null],[11,"bottom_left","","",7,null],[11,"bottom_right","","",7,null],[11,"translate_by_size","","",7,null],[11,"union","","",7,null],[11,"scale","","",7,null],[11,"zero","","Constructor, setting all sides to zero.",7,{"inputs":[],"output":{"name":"typedrect"}}],[11,"is_empty","","Returns true if the size is zero, regardless of the origin&#39;s value.",7,null],[11,"mul","","",7,null],[11,"div","","",7,null],[11,"mul","","",7,null],[11,"div","","",7,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",7,null],[11,"from_untyped","","Tag a unitless value with units.",7,{"inputs":[{"name":"typedrect"}],"output":{"name":"typedrect"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",7,null],[11,"round","","Return a rectangle with edges rounded to integer coordinates, such that\nthe returned rectangle has the same set of pixel centers as the original\none.\nEdges at offset 0.5 round up.\nSuitable for most places where integral device coordinates\nare needed, but note that any translation should be applied first to\navoid pixel rounding errors.\nNote that this is *not* rounding to nearest integer if the values are negative.\nThey are always rounding as floor(n + 0.5).",7,null],[11,"round_in","","Return a rectangle with edges rounded to integer coordinates, such that\nthe original rectangle contains the resulting rectangle.",7,null],[11,"round_out","","Return a rectangle with edges rounded to integer coordinates, such that\nthe original rectangle is contained in the resulting rectangle.",7,null],[11,"to_f32","","Cast into an f32 vector.",7,null],[11,"to_uint","","Cast into an usize vector, truncating decimals if any.",7,null],[11,"to_i32","","Cast into an i32 vector, truncating decimals if any.",7,null],[11,"to_i64","","Cast into an i64 vector, truncating decimals if any.",7,null],[11,"encode","euclid::scale_factor","",8,null],[11,"decode","","",8,{"inputs":[{"name":"__dtsrcdst"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",8,null],[11,"deserialize","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",8,null],[11,"new","","",8,{"inputs":[{"name":"t"}],"output":{"name":"scalefactor"}}],[11,"get","","",8,null],[11,"inv","","The inverse ScaleFactor (1.0 / self).",8,null],[11,"mul","","",8,null],[11,"add","","",8,null],[11,"sub","","",8,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",8,null],[11,"eq","","",8,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"clone","euclid::side_offsets","",9,null],[11,"heap_size_of_children","","",9,null],[11,"deserialize","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",9,null],[11,"eq","","",9,null],[11,"hash","","",9,null],[11,"fmt","","",9,null],[11,"new","","Constructor taking a scalar for each side.",9,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedsideoffsets2d"}}],[11,"from_lengths","","Constructor taking a typed Length for each side.",9,{"inputs":[{"name":"length"},{"name":"length"},{"name":"length"},{"name":"length"}],"output":{"name":"typedsideoffsets2d"}}],[11,"top_typed","","Access self.top as a typed Length instead of a scalar value.",9,null],[11,"right_typed","","Access self.right as a typed Length instead of a scalar value.",9,null],[11,"bottom_typed","","Access self.bottom as a typed Length instead of a scalar value.",9,null],[11,"left_typed","","Access self.left as a typed Length instead of a scalar value.",9,null],[11,"new_all_same","","Constructor setting the same value to all sides, taking a scalar value directly.",9,{"inputs":[{"name":"t"}],"output":{"name":"typedsideoffsets2d"}}],[11,"from_length_all_same","","Constructor setting the same value to all sides, taking a typed Length.",9,{"inputs":[{"name":"length"}],"output":{"name":"typedsideoffsets2d"}}],[11,"horizontal","","",9,null],[11,"vertical","","",9,null],[11,"horizontal_typed","","",9,null],[11,"vertical_typed","","",9,null],[11,"add","","",9,null],[11,"zero","","Constructor, setting all sides to zero.",9,{"inputs":[],"output":{"name":"typedsideoffsets2d"}}],[11,"encode","euclid::size","",10,null],[11,"decode","","",10,{"inputs":[{"name":"__dtu"}],"output":{"name":"result"}}],[11,"clone","","",10,null],[11,"heap_size_of_children","","",10,null],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",10,null],[11,"eq","","",10,null],[11,"hash","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",10,null],[11,"new","","Constructor taing scalar values.",10,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedsize2d"}}],[11,"from_lengths","","Constructor taing scalar stronlgy typed lengths.",10,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"typedsize2d"}}],[11,"round","","Rounds each component to the nearest integer value.",10,null],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the orginal value.",10,null],[11,"floor","","Rounds each component to the biggest integer equal or lower than the orginal value.",10,null],[11,"area","","",10,null],[11,"zero","","",10,{"inputs":[],"output":{"name":"typedsize2d"}}],[11,"zero","","",10,{"inputs":[],"output":{"name":"typedsize2d"}}],[11,"mul","","",10,null],[11,"div","","",10,null],[11,"mul","","",10,null],[11,"div","","",10,null],[11,"width_typed","","Returns self.width as a Length carrying the unit.",10,null],[11,"height_typed","","Returns self.height as a Length carrying the unit.",10,null],[11,"to_array","","",10,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",10,null],[11,"from_untyped","","Tag a unitless value with units.",10,{"inputs":[{"name":"typedsize2d"}],"output":{"name":"typedsize2d"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",10,null],[11,"to_f32","","Cast into an f32 size.",10,null],[11,"to_uint","","Cast into an usize size, truncating decimals if any.",10,null],[11,"to_i32","","Cast into an i32 size, truncating decimals if any.",10,null],[11,"to_i64","","Cast into an i64 size, truncating decimals if any.",10,null],[11,"encode","euclid","",11,null],[11,"decode","","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",11,null],[6,"Point2D","lyon_core::math","",null,null],[6,"Radians","","",null,null],[5,"fixed","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"fixedpoint32"}}],[5,"point","","",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"point"}}],[5,"vec2","","",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"vec2"}}],[5,"int_vec2","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"intvec2"}}],[5,"size","","",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"size"}}],[5,"int_size","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"intsize"}}],[5,"rect","","",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"rect"}}],[5,"int_rect","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"intrect"}}],[5,"rad","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"radians"}}],[6,"Point","","",null,null],[6,"IntPoint","","",null,null],[6,"Int64Point","","",null,null],[6,"F64Point","","",null,null],[6,"Vec2","","",null,null],[6,"IntVec2","","",null,null],[6,"Size","","",null,null],[6,"IntSize","","",null,null],[6,"Rect","","",null,null],[6,"IntRect","","",null,null],[6,"FixedPoint32","","",null,null],[6,"FixedPoint64","","",null,null],[6,"TessPoint","","",null,null],[6,"TessPoint64","","",null,null],[6,"Vec3","","",null,null],[6,"IntVec3","","",null,null],[6,"Mat4","","",null,null],[8,"Vec2Array","","",null,null],[10,"array","","",12,null],[8,"Vec2Length","","",null,null],[10,"length","","",13,null],[10,"normalized","","",13,null],[8,"Vec2SquareLength","","",null,null],[10,"square_length","","",14,null],[11,"array","","",15,null],[11,"length","","",16,null],[11,"normalized","","",16,null],[11,"square_length","","",16,null],[0,"math_utils","lyon_core","Various math tools that are usefull for several modules.",null,null],[5,"fuzzy_eq_f32","lyon_core::math_utils","",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"bool"}}],[5,"fuzzy_eq","","",null,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[5,"is_below","","Defines an ordering between two points",null,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[5,"is_below_fixed","","Defines an ordering between two points",null,{"inputs":[{"name":"tesspoint"},{"name":"tesspoint"}],"output":{"name":"bool"}}],[5,"ellipse_center_to_point","","",null,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[5,"ellipse_point_from_angle","","",null,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"f32"}],"output":{"name":"vec2"}}],[5,"directed_angle","","Angle between vectors v1 and v2 (oriented clockwise assyming y points downwards).\nThe result is a number between 0 and 2*PI.",null,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"f32"}}],[5,"directed_angle2","","",null,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"vec2"}],"output":{"name":"f32"}}],[5,"angle_between","","",null,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"f32"}}],[5,"tangent","","",null,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[5,"line_intersection","","",null,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"vec2"},{"name":"vec2"}],"output":{"name":"option"}}],[5,"segment_intersection","","",null,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"vec2"},{"name":"vec2"}],"output":{"name":"option"}}],[5,"line_horizontal_intersection","","",null,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"f32"}],"output":{"name":"f32"}}],[0,"path_state","lyon_core","",null,null],[3,"PathState","lyon_core::path_state","Represents the current state of a path while it is being built.",null,null],[12,"current","","The current point.",17,null],[12,"first","","The first point of the current sub-path.",17,null],[12,"last_ctrl","","The last control point.",17,null],[11,"new","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"svg_event","","",17,null],[11,"path_event","","",17,null],[11,"flattened_event","","",17,null],[11,"move_to","","",17,null],[11,"line_to","","",17,null],[11,"curve_to","","",17,null],[11,"close","","",17,null],[11,"next","","",17,null],[11,"relative_next","","",17,null],[11,"get_smooth_ctrl","","",17,null],[11,"from_relative","","",17,null],[11,"svg_to_path_event","","",17,null],[0,"events","lyon_core","",null,null],[4,"SvgEvent","lyon_core::events","",null,null],[13,"MoveTo","","",18,null],[13,"RelativeMoveTo","","",18,null],[13,"LineTo","","",18,null],[13,"RelativeLineTo","","",18,null],[13,"QuadraticTo","","",18,null],[13,"RelativeQuadraticTo","","",18,null],[13,"CubicTo","","",18,null],[13,"RelativeCubicTo","","",18,null],[13,"ArcTo","","",18,null],[13,"RelativeArcTo","","",18,null],[13,"HorizontalLineTo","","",18,null],[13,"VerticalLineTo","","",18,null],[13,"RelativeHorizontalLineTo","","",18,null],[13,"RelativeVerticalLineTo","","",18,null],[13,"SmoothQuadraticTo","","",18,null],[13,"SmoothRelativeQuadraticTo","","",18,null],[13,"SmoothCubicTo","","",18,null],[13,"SmoothRelativeCubicTo","","",18,null],[13,"Close","","",18,null],[4,"PathEvent","","",null,null],[13,"MoveTo","","",19,null],[13,"LineTo","","",19,null],[13,"QuadraticTo","","",19,null],[13,"CubicTo","","",19,null],[13,"Close","","",19,null],[4,"FlattenedEvent","","",null,null],[13,"MoveTo","","",20,null],[13,"LineTo","","",20,null],[13,"Close","","",20,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"to_svg_event","","",19,null],[11,"destination","","",19,null],[11,"to_svg_event","","",20,null],[11,"to_path_event","","",20,null],[0,"fixed","lyon_core","",null,null],[3,"_1","lyon_core::fixed","",null,null],[3,"_2","","",null,null],[3,"_3","","",null,null],[3,"_4","","",null,null],[3,"_5","","",null,null],[3,"_6","","",null,null],[3,"_7","","",null,null],[3,"_8","","",null,null],[3,"_9","","",null,null],[3,"_10","","",null,null],[3,"_11","","",null,null],[3,"_12","","",null,null],[3,"_13","","",null,null],[3,"_14","","",null,null],[3,"_15","","",null,null],[3,"_16","","",null,null],[3,"_24","","",null,null],[3,"_32","","",null,null],[3,"Fp32","","A 32 fixed point number.\nThe size of the fractional is defined by the type parameter F.",null,null],[3,"Fp64","","A 64 bits fixed point number.\nThe size of the fractional is defined by the type parameter F.",null,null],[8,"FractionalBits","","",null,null],[10,"bits","","",21,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",22,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",23,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",24,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",25,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",26,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",27,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",28,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",29,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",30,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",31,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",32,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",33,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",34,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",35,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",36,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",37,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",38,{"inputs":[],"output":{"name":"u32"}}],[11,"bits","","",39,{"inputs":[],"output":{"name":"u32"}}],[11,"raw","","Returns the internal representation.",40,null],[11,"from_raw","","",40,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"zero","","",40,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",40,null],[11,"epsilon","","Smallest increment that can be reresented with this type.",40,{"inputs":[],"output":{"name":"self"}}],[11,"from_f32","","Converts from a 32 bits floating point value.",40,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"to_f32","","Converts to a 32 bits floating point value.",40,null],[11,"from_f64","","Converts from a 64 bits floating point value.",40,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"to_f64","","Converts to a 64 bits floating point value.",40,null],[11,"sign","","Returns 1 if the number of positive, -1 if it is negative.",40,null],[11,"rem","","Returns the result of self % other.",40,null],[11,"min","","Returns the lowest of the two values.",40,null],[11,"max","","Returns the highest of the two values.",40,null],[11,"abs","","Returns the absolute value of this number.",40,null],[11,"to_fixed","","Returns the same number with a different fractional precision.",40,null],[11,"clone","","",40,null],[11,"eq","","",40,null],[11,"fmt","","",40,null],[11,"fmt","","",40,null],[11,"hash","","",40,null],[11,"partial_cmp","","",40,null],[11,"cmp","","",40,null],[11,"add","","",40,null],[11,"sub","","",40,null],[11,"mul","","",40,null],[11,"neg","","",40,null],[11,"mul","","",40,null],[11,"div","","",40,null],[11,"add_assign","","",40,null],[11,"sub_assign","","",40,null],[11,"into","","",40,null],[11,"from","","",40,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"into","","",40,null],[11,"from","","",40,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"raw","","Returns the internal representation.",41,null],[11,"from_raw","","",41,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"zero","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",41,null],[11,"epsilon","","Smallest increment that can be reresented with this type.",41,{"inputs":[],"output":{"name":"self"}}],[11,"from_f32","","Converts from a 32 bits floating point value.",41,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"to_f32","","Converts to a 32 bits floating point value.",41,null],[11,"from_f64","","Converts from a 64 bits floating point value.",41,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"to_f64","","Converts to a 64 bits floating point value.",41,null],[11,"sign","","Returns 1 if the number of positive, -1 if it is negative.",41,null],[11,"rem","","Returns the result of self % other.",41,null],[11,"min","","Returns the lowest of the two values.",41,null],[11,"max","","Returns the highest of the two values.",41,null],[11,"abs","","Returns the absolute value of this number.",41,null],[11,"to_fixed","","Returns the same number with a different fractional precision.",41,null],[11,"clone","","",41,null],[11,"eq","","",41,null],[11,"fmt","","",41,null],[11,"fmt","","",41,null],[11,"hash","","",41,null],[11,"partial_cmp","","",41,null],[11,"cmp","","",41,null],[11,"add","","",41,null],[11,"sub","","",41,null],[11,"mul","","",41,null],[11,"neg","","",41,null],[11,"mul","","",41,null],[11,"div","","",41,null],[11,"add_assign","","",41,null],[11,"sub_assign","","",41,null],[11,"into","","",41,null],[11,"from","","",41,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"into","","",41,null],[11,"from","","",41,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"one","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"from_i32","","",41,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"truncate_to_i32","","Convert to an i32, truncating the fractional part",41,null],[11,"mul_div","","Computes the self * m / d in one go, avoid the precision loss from shifting bits back\nand forth.",41,null],[11,"min_val","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"max_val","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"to_fp64","","Casts into a 64 bits fixed point number.",41,null],[11,"div","","",41,null],[11,"one","","",40,{"inputs":[],"output":{"name":"self"}}],[11,"from_i64","","",40,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"truncate_to_i64","","Convert to an i64, truncating the fractional part",40,null],[11,"mul_div","","Computes the self * m / d in one go, avoid the precision loss from shifting bits back\nand forth.",40,null],[11,"to_fp32","","Casts into a 32 bits fixed point number.",40,null],[11,"div","","",40,null],[11,"eq","lyon_core","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null]],"paths":[[3,"ArcFlags"],[3,"Length"],[3,"TypedMatrix2D"],[3,"TypedMatrix4D"],[3,"TypedPoint2D"],[3,"TypedPoint3D"],[3,"TypedPoint4D"],[3,"TypedRect"],[3,"ScaleFactor"],[3,"TypedSideOffsets2D"],[3,"TypedSize2D"],[3,"UnknownUnit"],[8,"Vec2Array"],[8,"Vec2Length"],[8,"Vec2SquareLength"],[6,"Point2D"],[6,"Vec2"],[3,"PathState"],[4,"SvgEvent"],[4,"PathEvent"],[4,"FlattenedEvent"],[8,"FractionalBits"],[3,"_1"],[3,"_2"],[3,"_3"],[3,"_4"],[3,"_5"],[3,"_6"],[3,"_7"],[3,"_8"],[3,"_9"],[3,"_10"],[3,"_11"],[3,"_12"],[3,"_13"],[3,"_14"],[3,"_15"],[3,"_16"],[3,"_24"],[3,"_32"],[3,"Fp64"],[3,"Fp32"]]};
searchIndex["lyon_bezier"] = {"doc":"Bezier curve related maths and tools.","items":[[3,"CubicFlatteningIter","lyon_bezier","An iterator that expresses the linearization of a cubic bezier segment for given a tolerance\nthreshold.\nThe iterator starts at the first point *after* the origin of the curve and ends at the\ndestination.",null,null],[3,"QuadraticBezierSegment","","",null,null],[12,"from","","",0,null],[12,"ctrl","","",0,null],[12,"to","","",0,null],[3,"QuadraticFlatteningIter","","",null,null],[3,"CubicBezierSegment","","",null,null],[12,"from","","",1,null],[12,"ctrl1","","",1,null],[12,"ctrl2","","",1,null],[12,"to","","",1,null],[11,"new","","Creates an iterator that yields points along a cubic bezier segment, useful to build a\nflattened approximation of the curve given a certain tolerance.",2,{"inputs":[{"name":"cubicbeziersegment"},{"name":"f32"}],"output":{"name":"self"}}],[11,"next","","",2,null],[6,"Point","","",null,null],[6,"Vec2","","",null,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"sample","","",0,null],[11,"sample_x","","",0,null],[11,"sample_y","","",0,null],[11,"flip","","",0,null],[11,"find_y_maximum","","Find the advancement of the y-most position in the curve.",0,null],[11,"find_y_inflection","","Return the y inflection point or None if this curve is y-monotone.",0,null],[11,"split","","Split this curve into two sub-curves.",0,null],[11,"before_split","","Return the curve before the split point.",0,null],[11,"after_split","","Return the curve after the split point.",0,null],[11,"to_cubic","","Elevate this curve to a third order bezier.",0,null],[11,"flattening_step","","Find the interval of the begining of the curve that can be approximated with a\nline segment.",0,null],[11,"flattened_for_each","","Iterates through the curve invoking a callback at each point.",0,null],[11,"flattening_iter","","Returns the flattened representation of the curve as an iterator, starting *after* the\ncurrent point.",0,null],[11,"new","","",3,{"inputs":[{"name":"quadraticbeziersegment"},{"name":"f32"}],"output":{"name":"self"}}],[11,"next","","",3,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"sample","","",1,null],[11,"split","","Split this curve into two sub-curves.",1,null],[11,"before_split","","Return the curve before the split point.",1,null],[11,"after_split","","Return the curve after the split point.",1,null],[11,"flattening_iter","","Returns the flattened representation of the curve as an iterator, starting *after* the\ncurrent point.",1,null],[11,"flattened_for_each","","Iterates through the curve invoking a callback at each point.",1,null]],"paths":[[3,"QuadraticBezierSegment"],[3,"CubicBezierSegment"],[3,"CubicFlatteningIter"],[3,"QuadraticFlatteningIter"]]};
searchIndex["euclid"] = {"doc":"A collection of strongly typed math tools for computer graphics with an inclination\ntowards 2d graphics and layout.","items":[[3,"UnknownUnit","euclid","The default unit.",null,null],[3,"Rad","","Unit for angles in radians.",null,null],[3,"Deg","","Unit for angles in degrees.",null,null],[0,"approxeq","","",null,null],[8,"ApproxEq","euclid::approxeq","Trait for testing approximate equality",null,null],[10,"approx_epsilon","","",0,{"inputs":[],"output":{"name":"eps"}}],[10,"approx_eq","","",0,null],[10,"approx_eq_eps","","",0,null],[0,"length","euclid","A one-dimensional length, tagged with its units.",null,null],[3,"Length","euclid::length","A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.",null,null],[12,"0","","",1,null],[11,"encode","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"__dtunit"}],"output":{"name":"result"}}],[11,"clone","","",1,null],[11,"heap_size_of_children","","",1,null],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",1,null],[11,"new","","",1,{"inputs":[{"name":"t"}],"output":{"name":"length"}}],[11,"get","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"div","","",1,null],[11,"mul","","",1,null],[11,"div","","",1,null],[11,"neg","","",1,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"zero","","",1,{"inputs":[],"output":{"name":"length"}}],[0,"matrix2d","euclid","",null,null],[3,"TypedMatrix2D","euclid::matrix2d","A 2d transform stored as a 2 by 3 matrix in row-major order in memory,\nuseful to represent 2d transformations.",null,null],[12,"m11","","",2,null],[12,"m12","","",2,null],[12,"m21","","",2,null],[12,"m22","","",2,null],[12,"m31","","",2,null],[12,"m32","","",2,null],[6,"Matrix2D","","The default 2d matrix type with no units.",null,null],[11,"clone","","",2,null],[11,"heap_size_of_children","","",2,null],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",2,null],[11,"eq","","",2,null],[11,"hash","","",2,null],[11,"row_major","","Create a matrix specifying its components in row-major order.",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix2d"}}],[11,"column_major","","Create a matrix specifying its components in column-major order.",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix2d"}}],[11,"to_row_major_array","","Returns an array containing this matrix&#39;s terms in row-major order (the order\nin which the matrix is actually laid out in memory).",2,null],[11,"to_column_major_array","","Returns an array containing this matrix&#39;s terms in column-major order.",2,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",2,null],[11,"from_untyped","","Tag a unitless value with units.",2,{"inputs":[{"name":"matrix2d"}],"output":{"name":"typedmatrix2d"}}],[11,"identity","","",2,{"inputs":[],"output":{"name":"typedmatrix2d"}}],[11,"post_mul","","Returns the multiplication of the two matrices such that mat&#39;s transformation\napplies after self&#39;s transformation.",2,null],[11,"pre_mul","","Returns the multiplication of the two matrices such that mat&#39;s transformation\napplies before self&#39;s transformation.",2,null],[11,"create_translation","","Returns a translation matrix.",2,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix2d"}}],[11,"post_translated","","Applies a translation after self&#39;s transformation and returns the resulting matrix.",2,null],[11,"pre_translated","","Applies a translation before self&#39;s transformation and returns the resulting matrix.",2,null],[11,"create_scale","","Returns a scale matrix.",2,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix2d"}}],[11,"post_scaled","","Applies a scale after self&#39;s transformation and returns the resulting matrix.",2,null],[11,"pre_scaled","","Applies a scale before self&#39;s transformation and returns the resulting matrix.",2,null],[11,"create_rotation","","Returns a rotation matrix.",2,{"inputs":[{"name":"radians"}],"output":{"name":"typedmatrix2d"}}],[11,"post_rotated","","Applies a rotation after self&#39;s transformation and returns the resulting matrix.",2,null],[11,"pre_rotated","","Applies a rotation after self&#39;s transformation and returns the resulting matrix.",2,null],[11,"transform_point","","Returns the given point transformed by this matrix.",2,null],[11,"transform_rect","","Returns a rectangle that encompasses the result of transforming the given rectangle by this\nmatrix.",2,null],[11,"determinant","","Computes and returns the determinant of this matrix.",2,null],[11,"inverse","","Returns the inverse matrix if possible.",2,null],[11,"with_destination","","Returns the same matrix with a different destination unit.",2,null],[11,"with_source","","Returns the same matrix with a different source unit.",2,null],[11,"approx_eq","","",2,null],[0,"matrix4d","euclid","",null,null],[3,"TypedMatrix4D","euclid::matrix4d","A 4 by 4 matrix stored in row-major order in memory, useful to represent\n3d transformations.",null,null],[12,"m11","","",3,null],[12,"m12","","",3,null],[12,"m13","","",3,null],[12,"m14","","",3,null],[12,"m21","","",3,null],[12,"m22","","",3,null],[12,"m23","","",3,null],[12,"m24","","",3,null],[12,"m31","","",3,null],[12,"m32","","",3,null],[12,"m33","","",3,null],[12,"m34","","",3,null],[12,"m41","","",3,null],[12,"m42","","",3,null],[12,"m43","","",3,null],[12,"m44","","",3,null],[6,"Matrix4D","","The default 4d matrix type with no units.",null,null],[11,"clone","","",3,null],[11,"heap_size_of_children","","",3,null],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",3,null],[11,"eq","","",3,null],[11,"hash","","",3,null],[11,"row_major","","Create a matrix specifying its components in row-major order.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"column_major","","Create a matrix specifying its components in column-major order.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"row_major_2d","","Create a 4 by 4 matrix representing a 2d transformation, specifying its components\nin row-major order.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"ortho","","Create an orthogonal projection matrix.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"identity","","",3,{"inputs":[],"output":{"name":"typedmatrix4d"}}],[11,"is_2d","","Returns true if this matrix can be represented with a TypedMatrix2D.",3,null],[11,"to_2d","","Create a 2D matrix picking the relevent terms from this matrix.",3,null],[11,"approx_eq","","",3,null],[11,"with_destination","","Returns the same matrix with a different destination unit.",3,null],[11,"with_source","","Returns the same matrix with a different source unit.",3,null],[11,"post_mul","","Returns the multiplication of the two matrices such that mat&#39;s transformation\napplies after self&#39;s transformation.",3,null],[11,"pre_mul","","Returns the multiplication of the two matrices such that mat&#39;s transformation\napplies before self&#39;s transformation.",3,null],[11,"inverse","","Returns the inverse matrix if possible.",3,null],[11,"determinant","","Compute the determinant of the matrix.",3,null],[11,"mul_s","","Multiplies all of the matrix&#39;s component by a scalar and returns the result.",3,null],[11,"from_scale_factor","","Convenience function to create a scale matrix from a ScaleFactor.",3,{"inputs":[{"name":"scalefactor"}],"output":{"name":"typedmatrix4d"}}],[11,"transform_point","","Returns the given 2d point transformed by this matrix.",3,null],[11,"transform_point3d","","Returns the given 3d point transformed by this matrix.",3,null],[11,"transform_point4d","","Returns the given 4d point transformed by this matrix.",3,null],[11,"create_translation","","Create a 3d translation matrix",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"pre_translated","","Returns a matrix with a translation applied before self&#39;s transformation.",3,null],[11,"post_translated","","Returns a matrix with a translation applied after self&#39;s transformation.",3,null],[11,"create_scale","","Create a 3d scale matrix",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"pre_scaled","","Returns a matrix with a scale applied before self&#39;s transformation.",3,null],[11,"post_scaled","","Returns a matrix with a scale applied after self&#39;s transformation.",3,null],[11,"create_rotation","","Create a 3d rotation matrix from an angle / axis.\nThe supplied axis must be normalized.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"radians"}],"output":{"name":"typedmatrix4d"}}],[11,"post_rotated","","Returns a matrix with a rotation applied after self&#39;s transformation.",3,null],[11,"pre_rotated","","Returns a matrix with a rotation applied before self&#39;s transformation.",3,null],[11,"create_skew","","Create a 2d skew matrix.",3,{"inputs":[{"name":"radians"},{"name":"radians"}],"output":{"name":"typedmatrix4d"}}],[11,"create_perspective","","Create a simple perspective projection matrix",3,{"inputs":[{"name":"t"}],"output":{"name":"typedmatrix4d"}}],[11,"to_row_major_array","","Returns an array containing this matrix&#39;s terms in row-major order (the order\nin which the matrix is actually laid out in memory).",3,null],[11,"to_column_major_array","","Returns an array containing this matrix&#39;s terms in column-major order.",3,null],[11,"to_row_arrays","","Returns an array containing this matrix&#39;s 4 rows in (in row-major order)\nas arrays.",3,null],[11,"to_column_arrays","","Returns an array containing this matrix&#39;s 4 columns in (in row-major order,\nor 4 rows in column-major order) as arrays.",3,null],[11,"fmt","","",3,null],[0,"num","euclid","A one-dimensional length, tagged with its units.",null,null],[8,"Zero","euclid::num","",null,null],[10,"zero","","",4,{"inputs":[],"output":{"name":"self"}}],[8,"One","","",null,null],[10,"one","","",5,{"inputs":[],"output":{"name":"self"}}],[8,"Round","","",null,null],[10,"round","","",6,null],[8,"Floor","","",null,null],[10,"floor","","",7,null],[8,"Ceil","","",null,null],[10,"ceil","","",8,null],[0,"point","euclid","",null,null],[3,"TypedPoint2D","euclid::point","A 2d Point tagged with a unit.",null,null],[12,"x","","",9,null],[12,"y","","",9,null],[3,"TypedPoint3D","","A 3d Point tagged with a unit.",null,null],[12,"x","","",10,null],[12,"y","","",10,null],[12,"z","","",10,null],[3,"TypedPoint4D","","A 4d Point tagged with a unit.",null,null],[12,"x","","",11,null],[12,"y","","",11,null],[12,"z","","",11,null],[12,"w","","",11,null],[6,"Point2D","","Default 2d point type with no unit.",null,null],[6,"Point3D","","Default 3d point type with no unit.",null,null],[6,"Point4D","","Default 4d point with no unit.",null,null],[11,"encode","","",9,null],[11,"decode","","",9,{"inputs":[{"name":"__dtu"}],"output":{"name":"result"}}],[11,"clone","","",9,null],[11,"heap_size_of_children","","",9,null],[11,"deserialize","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",9,null],[11,"eq","","",9,null],[11,"hash","","",9,null],[11,"zero","","Constructor, setting all components to zero.",9,{"inputs":[],"output":{"name":"typedpoint2d"}}],[11,"fmt","","",9,null],[11,"fmt","","",9,null],[11,"new","","Constructor taking scalar values directly.",9,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedpoint2d"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",9,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"typedpoint2d"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",9,null],[11,"y_typed","","Returns self.y as a Length carrying the unit.",9,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",9,null],[11,"from_untyped","","Tag a unitless value with units.",9,{"inputs":[{"name":"point2d"}],"output":{"name":"typedpoint2d"}}],[11,"to_array","","",9,null],[11,"dot","","Dot product.",9,null],[11,"cross","","Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0]..",9,null],[11,"add","","",9,null],[11,"add","","",9,null],[11,"add_size","","",9,null],[11,"sub","","",9,null],[11,"neg","","",9,null],[11,"min","","",9,null],[11,"max","","",9,null],[11,"mul","","",9,null],[11,"div","","",9,null],[11,"mul","","",9,null],[11,"div","","",9,null],[11,"round","","Rounds each component to the nearest integer value.",9,null],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the orginal value.",9,null],[11,"floor","","Rounds each component to the biggest integer equal or lower than the orginal value.",9,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",9,null],[11,"to_f32","","Cast into an f32 vector.",9,null],[11,"to_uint","","Cast into an usize point, truncating decimals if any.",9,null],[11,"to_i32","","Cast into an i32 point, truncating decimals if any.",9,null],[11,"to_i64","","Cast into an i64 point, truncating decimals if any.",9,null],[11,"encode","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"__dtu"}],"output":{"name":"result"}}],[11,"clone","","",10,null],[11,"heap_size_of_children","","",10,null],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",10,null],[11,"eq","","",10,null],[11,"hash","","",10,null],[11,"zero","","Constructor, setting all copmonents to zero.",10,{"inputs":[],"output":{"name":"typedpoint3d"}}],[11,"fmt","","",10,null],[11,"fmt","","",10,null],[11,"new","","Constructor taking scalar values directly.",10,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedpoint3d"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",10,{"inputs":[{"name":"length"},{"name":"length"},{"name":"length"}],"output":{"name":"typedpoint3d"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",10,null],[11,"y_typed","","Returns self.y as a Length carrying the unit.",10,null],[11,"z_typed","","Returns self.z as a Length carrying the unit.",10,null],[11,"to_array","","",10,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",10,null],[11,"from_untyped","","Tag a unitless value with units.",10,{"inputs":[{"name":"point3d"}],"output":{"name":"typedpoint3d"}}],[11,"dot","","",10,null],[11,"cross","","",10,null],[11,"add","","",10,null],[11,"sub","","",10,null],[11,"neg","","",10,null],[11,"min","","",10,null],[11,"max","","",10,null],[11,"round","","Rounds each component to the nearest integer value.",10,null],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the orginal value.",10,null],[11,"floor","","Rounds each component to the biggest integer equal or lower than the orginal value.",10,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",10,null],[11,"to_f32","","Cast into an f32 vector.",10,null],[11,"to_uint","","Cast into an usize point, truncating decimals if any.",10,null],[11,"to_i32","","Cast into an i32 point, truncating decimals if any.",10,null],[11,"to_i64","","Cast into an i64 point, truncating decimals if any.",10,null],[11,"encode","","",11,null],[11,"decode","","",11,{"inputs":[{"name":"__dtu"}],"output":{"name":"result"}}],[11,"clone","","",11,null],[11,"heap_size_of_children","","",11,null],[11,"deserialize","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",11,null],[11,"eq","","",11,null],[11,"hash","","",11,null],[11,"zero","","Constructor, setting all copmonents to zero.",11,{"inputs":[],"output":{"name":"typedpoint4d"}}],[11,"fmt","","",11,null],[11,"fmt","","",11,null],[11,"new","","Constructor taking scalar values directly.",11,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedpoint4d"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",11,{"inputs":[{"name":"length"},{"name":"length"},{"name":"length"},{"name":"length"}],"output":{"name":"typedpoint4d"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",11,null],[11,"y_typed","","Returns self.y as a Length carrying the unit.",11,null],[11,"z_typed","","Returns self.z as a Length carrying the unit.",11,null],[11,"w_typed","","Returns self.w as a Length carrying the unit.",11,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",11,null],[11,"from_untyped","","Tag a unitless value with units.",11,{"inputs":[{"name":"point4d"}],"output":{"name":"typedpoint4d"}}],[11,"to_array","","",11,null],[11,"to_2d","","Convert into a 2d point.",11,null],[11,"to_3d","","Convert into a 3d point.",11,null],[11,"add","","",11,null],[11,"sub","","",11,null],[11,"neg","","",11,null],[11,"min","","",11,null],[11,"max","","",11,null],[11,"round","","Rounds each component to the nearest integer value.",11,null],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the orginal value.",11,null],[11,"floor","","Rounds each component to the biggest integer equal or lower than the orginal value.",11,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",11,null],[11,"to_f32","","Cast into an f32 vector.",11,null],[11,"to_uint","","Cast into an usize point, truncating decimals if any.",11,null],[11,"to_i32","","Cast into an i32 point, truncating decimals if any.",11,null],[11,"to_i64","","Cast into an i64 point, truncating decimals if any.",11,null],[0,"rect","euclid","",null,null],[3,"TypedRect","euclid::rect","A 2d Rectangle optionally tagged with a unit.",null,null],[12,"origin","","",12,null],[12,"size","","",12,null],[5,"min","","",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[6,"Rect","","The default rectangle type with no unit.",null,null],[11,"encode","","",12,null],[11,"decode","","",12,{"inputs":[{"name":"__dtu"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",12,null],[11,"deserialize","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",12,null],[11,"clone","","",12,null],[11,"eq","","",12,null],[11,"fmt","","",12,null],[11,"fmt","","",12,null],[11,"new","","Constructor.",12,{"inputs":[{"name":"typedpoint2d"},{"name":"typedsize2d"}],"output":{"name":"typedrect"}}],[11,"intersects","","",12,null],[11,"max_x","","",12,null],[11,"min_x","","",12,null],[11,"max_y","","",12,null],[11,"min_y","","",12,null],[11,"max_x_typed","","",12,null],[11,"min_x_typed","","",12,null],[11,"max_y_typed","","",12,null],[11,"min_y_typed","","",12,null],[11,"intersection","","",12,null],[11,"translate","","Translates the rect by a vector.",12,null],[11,"contains","","Returns true if this rectangle contains the point. Points are considered\nin the rectangle if they are on the left or top edge, but outside if they\nare on the right or bottom edge.",12,null],[11,"contains_rect","","Returns true if this rectangle contains the interior of rect. Always\nreturns true if rect is empty, and always returns false if rect is\nnonempty but this rectangle is empty.",12,null],[11,"inflate","","",12,null],[11,"inflate_typed","","",12,null],[11,"top_right","","",12,null],[11,"bottom_left","","",12,null],[11,"bottom_right","","",12,null],[11,"translate_by_size","","",12,null],[11,"union","","",12,null],[11,"scale","","",12,null],[11,"zero","","Constructor, setting all sides to zero.",12,{"inputs":[],"output":{"name":"typedrect"}}],[11,"is_empty","","Returns true if the size is zero, regardless of the origin&#39;s value.",12,null],[11,"mul","","",12,null],[11,"div","","",12,null],[11,"mul","","",12,null],[11,"div","","",12,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",12,null],[11,"from_untyped","","Tag a unitless value with units.",12,{"inputs":[{"name":"rect"}],"output":{"name":"typedrect"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",12,null],[11,"round","","Return a rectangle with edges rounded to integer coordinates, such that\nthe returned rectangle has the same set of pixel centers as the original\none.\nEdges at offset 0.5 round up.\nSuitable for most places where integral device coordinates\nare needed, but note that any translation should be applied first to\navoid pixel rounding errors.\nNote that this is *not* rounding to nearest integer if the values are negative.\nThey are always rounding as floor(n + 0.5).",12,null],[11,"round_in","","Return a rectangle with edges rounded to integer coordinates, such that\nthe original rectangle contains the resulting rectangle.",12,null],[11,"round_out","","Return a rectangle with edges rounded to integer coordinates, such that\nthe original rectangle is contained in the resulting rectangle.",12,null],[11,"to_f32","","Cast into an f32 vector.",12,null],[11,"to_uint","","Cast into an usize vector, truncating decimals if any.",12,null],[11,"to_i32","","Cast into an i32 vector, truncating decimals if any.",12,null],[11,"to_i64","","Cast into an i64 vector, truncating decimals if any.",12,null],[0,"scale_factor","euclid","A type-checked scaling factor between units.",null,null],[3,"ScaleFactor","euclid::scale_factor","A scaling factor between two different units of measurement.",null,null],[12,"0","","",13,null],[11,"encode","","",13,null],[11,"decode","","",13,{"inputs":[{"name":"__dtsrcdst"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",13,null],[11,"deserialize","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",13,null],[11,"new","","",13,{"inputs":[{"name":"t"}],"output":{"name":"scalefactor"}}],[11,"get","","",13,null],[11,"inv","","The inverse ScaleFactor (1.0 / self).",13,null],[11,"mul","","",13,null],[11,"add","","",13,null],[11,"sub","","",13,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",13,null],[11,"eq","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"fmt","","",13,null],[0,"side_offsets","euclid","A group of side offsets, which correspond to top/left/bottom/right for borders, padding,\nand margins in CSS.",null,null],[3,"TypedSideOffsets2D","euclid::side_offsets","",null,null],[12,"top","","",14,null],[12,"right","","",14,null],[12,"bottom","","",14,null],[12,"left","","",14,null],[6,"SideOffsets2D","","The default side offset type with no unit.",null,null],[11,"clone","","",14,null],[11,"heap_size_of_children","","",14,null],[11,"deserialize","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",14,null],[11,"eq","","",14,null],[11,"hash","","",14,null],[11,"fmt","","",14,null],[11,"new","","Constructor taking a scalar for each side.",14,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedsideoffsets2d"}}],[11,"from_lengths","","Constructor taking a typed Length for each side.",14,{"inputs":[{"name":"length"},{"name":"length"},{"name":"length"},{"name":"length"}],"output":{"name":"typedsideoffsets2d"}}],[11,"top_typed","","Access self.top as a typed Length instead of a scalar value.",14,null],[11,"right_typed","","Access self.right as a typed Length instead of a scalar value.",14,null],[11,"bottom_typed","","Access self.bottom as a typed Length instead of a scalar value.",14,null],[11,"left_typed","","Access self.left as a typed Length instead of a scalar value.",14,null],[11,"new_all_same","","Constructor setting the same value to all sides, taking a scalar value directly.",14,{"inputs":[{"name":"t"}],"output":{"name":"typedsideoffsets2d"}}],[11,"from_length_all_same","","Constructor setting the same value to all sides, taking a typed Length.",14,{"inputs":[{"name":"length"}],"output":{"name":"typedsideoffsets2d"}}],[11,"horizontal","","",14,null],[11,"vertical","","",14,null],[11,"horizontal_typed","","",14,null],[11,"vertical_typed","","",14,null],[11,"add","","",14,null],[11,"zero","","Constructor, setting all sides to zero.",14,{"inputs":[],"output":{"name":"typedsideoffsets2d"}}],[0,"size","euclid","",null,null],[3,"TypedSize2D","euclid::size","",null,null],[12,"width","","",15,null],[12,"height","","",15,null],[6,"Size2D","","Default 2d size type with no unit.",null,null],[11,"encode","","",15,null],[11,"decode","","",15,{"inputs":[{"name":"__dtu"}],"output":{"name":"result"}}],[11,"clone","","",15,null],[11,"heap_size_of_children","","",15,null],[11,"deserialize","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",15,null],[11,"eq","","",15,null],[11,"hash","","",15,null],[11,"fmt","","",15,null],[11,"fmt","","",15,null],[11,"new","","Constructor taing scalar values.",15,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedsize2d"}}],[11,"from_lengths","","Constructor taing scalar stronlgy typed lengths.",15,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"typedsize2d"}}],[11,"round","","Rounds each component to the nearest integer value.",15,null],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the orginal value.",15,null],[11,"floor","","Rounds each component to the biggest integer equal or lower than the orginal value.",15,null],[11,"area","","",15,null],[11,"zero","","",15,{"inputs":[],"output":{"name":"typedsize2d"}}],[11,"zero","","",15,{"inputs":[],"output":{"name":"typedsize2d"}}],[11,"mul","","",15,null],[11,"div","","",15,null],[11,"mul","","",15,null],[11,"div","","",15,null],[11,"width_typed","","Returns self.width as a Length carrying the unit.",15,null],[11,"height_typed","","Returns self.height as a Length carrying the unit.",15,null],[11,"to_array","","",15,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",15,null],[11,"from_untyped","","Tag a unitless value with units.",15,{"inputs":[{"name":"size2d"}],"output":{"name":"typedsize2d"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",15,null],[11,"to_f32","","Cast into an f32 size.",15,null],[11,"to_uint","","Cast into an usize size, truncating decimals if any.",15,null],[11,"to_i32","","Cast into an i32 size, truncating decimals if any.",15,null],[11,"to_i64","","Cast into an i64 size, truncating decimals if any.",15,null],[6,"Radians","euclid","A value in radians.",null,null],[6,"Degrees","","A value in Degrees.",null,null],[11,"encode","","",16,null],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",16,null]],"paths":[[8,"ApproxEq"],[3,"Length"],[3,"TypedMatrix2D"],[3,"TypedMatrix4D"],[8,"Zero"],[8,"One"],[8,"Round"],[8,"Floor"],[8,"Ceil"],[3,"TypedPoint2D"],[3,"TypedPoint3D"],[3,"TypedPoint4D"],[3,"TypedRect"],[3,"ScaleFactor"],[3,"TypedSideOffsets2D"],[3,"TypedSize2D"],[3,"UnknownUnit"]]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",9,null],[11,"eq","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"hash","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"hash","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"hash","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"hash","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"contains","","# Examples",13,null],[11,"hash","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","serde::core","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"count","","",37,null],[11,"last","","",37,null],[11,"len","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"len","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"hash","core::result","",68,null],[11,"fmt","","",68,null],[11,"cmp","","",68,null],[11,"partial_cmp","","",68,null],[11,"lt","","",68,null],[11,"le","","",68,null],[11,"gt","","",68,null],[11,"ge","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"is_ok","","Returns true if the result is `Ok`",68,null],[11,"is_err","","Returns true if the result is `Err`",68,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",68,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",68,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",68,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",68,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",68,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",68,null],[11,"iter","","Returns an iterator over the possibly contained value.",68,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",68,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",68,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",68,null],[11,"fmt","","",69,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"next_back","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",72,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"count","","",72,null],[11,"nth","","",72,null],[11,"last","","",72,null],[11,"next_back","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",73,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"count","","",80,null],[11,"nth","","",80,null],[11,"last","","",80,null],[11,"next_back","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","core::str::pattern","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",84,null],[11,"clone","","",84,null],[11,"haystack","","",84,null],[11,"next","","",84,null],[11,"next_match","","",84,null],[11,"next_reject","","",84,null],[11,"next_back","","",84,null],[11,"next_match_back","","",84,null],[11,"next_reject_back","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"clone","","",86,null],[11,"fmt","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"eq","core::str","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"next_back","","",90,null],[11,"as_str","","View the underlying data as a subslice of the original data.",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"count","","",92,null],[11,"last","","",92,null],[11,"nth","","",92,null],[11,"next_back","","",92,null],[11,"len","","",92,null],[11,"fmt","","",93,null],[11,"next","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"next_back","","",93,null],[11,"next_back","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"next_back","","",95,null],[11,"next_back","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"next_back","","",99,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"next_back","","",101,null],[11,"next_back","","",102,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"default","core::hash::sip","",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"clone","","",105,null],[11,"fmt","","",105,null],[11,"default","","",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"clone","","",106,null],[11,"fmt","","",106,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",107,null],[11,"fmt","","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",105,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",106,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"write","","",105,null],[11,"finish","","",105,null],[11,"write","","",106,null],[11,"finish","","",106,null],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[11,"hash_slice","serde::core::hash","Feeds a slice of this type into the state provided.",118,null],[11,"write_u8","","Write a single `u8` into this hasher",119,null],[11,"write_u16","","Write a single `u16` into this hasher.",119,null],[11,"write_u32","","Write a single `u32` into this hasher.",119,null],[11,"write_u64","","Write a single `u64` into this hasher.",119,null],[11,"write_usize","","Write a single `usize` into this hasher.",119,null],[11,"write_i8","","Write a single `i8` into this hasher.",119,null],[11,"write_i16","","Write a single `i16` into this hasher.",119,null],[11,"write_i32","","Write a single `i32` into this hasher.",119,null],[11,"write_i64","","Write a single `i64` into this hasher.",119,null],[11,"write_isize","","Write a single `isize` into this hasher.",119,null],[11,"write_char","serde::core::fmt","Writes a `char` into this writer, returning whether the write succeeded.",120,null],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",120,null],[11,"ne","serde::core::cmp","This method tests for `!=`.",121,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",122,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",122,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",122,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",122,null],[11,"clone","rustc_unicode::u_str","",123,null],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",123,{"inputs":[{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"next","","",124,null],[11,"next_back","","",124,null],[11,"next","rustc_unicode::char","",125,null],[11,"next","","",126,null],[11,"clone","","",127,null],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"clone","","",128,null],[11,"fmt","","",128,null],[11,"next","","",127,null],[11,"size_hint","","",127,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",128,null],[11,"fmt","","",128,null],[11,"drop","collections::binary_heap","",129,null],[11,"deref","","",129,null],[11,"deref_mut","","",129,null],[11,"clone","","",130,null],[11,"clone_from","","",130,null],[11,"default","","",130,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",130,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",130,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",130,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",130,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",130,null],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or\n`None` if it is empty.",130,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",130,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",130,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",130,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",130,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",130,null],[11,"push","","Pushes an item onto the binary heap.",130,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",130,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",130,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",130,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",130,null],[11,"len","","Returns the length of the binary heap.",130,null],[11,"is_empty","","Checks if the binary heap is empty.",130,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",130,null],[11,"clear","","Drops all items from the binary heap.",130,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",130,null],[11,"clone","","",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"next_back","","",131,null],[11,"clone","","",132,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"next_back","","",132,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"next_back","","",133,null],[11,"from","","",130,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",134,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",130,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",130,null],[11,"extend","","",130,null],[11,"extend","","",130,null],[11,"drop","collections::btree::map","",135,null],[11,"clone","","",135,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",135,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",135,null],[11,"get","","Returns a reference to the value corresponding to the key.",135,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",135,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",135,null],[11,"insert","","Inserts a key-value pair into the map.",135,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",135,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",135,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",135,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",135,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",135,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",135,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"next_back","","",136,null],[11,"len","","",136,null],[11,"clone","","",136,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"next_back","","",137,null],[11,"len","","",137,null],[11,"into_iter","","",135,null],[11,"drop","","",138,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"next_back","","",138,null],[11,"len","","",138,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"next_back","","",139,null],[11,"len","","",139,null],[11,"clone","","",139,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"next_back","","",140,null],[11,"len","","",140,null],[11,"clone","","",140,null],[11,"next","","",141,null],[11,"next","","",142,null],[11,"size_hint","","",142,null],[11,"next_back","","",142,null],[11,"len","","",142,null],[11,"next_back","","",141,null],[11,"clone","","",141,null],[11,"next","","",143,null],[11,"next_back","","",143,null],[11,"from_iter","","",135,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",135,null],[11,"extend","","",135,null],[11,"hash","","",135,null],[11,"default","","",135,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",135,null],[11,"partial_cmp","","",135,null],[11,"cmp","","",135,null],[11,"fmt","","",135,null],[11,"index","","",135,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",135,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",135,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",135,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",135,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",135,null],[11,"len","","Returns the number of elements in the map.",135,null],[11,"is_empty","","Returns true if the map contains no elements.",135,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",144,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",144,null],[11,"key","","Returns a reference to this entry&#39;s key.",144,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",145,null],[11,"into_key","","Take ownership of the key.",145,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",145,null],[11,"key","","Gets a reference to the key in the entry.",146,null],[11,"remove_pair","","Take ownership of the key and value from the map.",146,null],[11,"get","","Gets a reference to the value in the entry.",146,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",146,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",146,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",146,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",146,null],[11,"partial_cmp","collections::btree::set","",147,null],[11,"lt","","",147,null],[11,"le","","",147,null],[11,"gt","","",147,null],[11,"ge","","",147,null],[11,"cmp","","",147,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"hash","","",147,null],[11,"clone","","",147,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",147,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",147,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",147,null],[11,"difference","","Visits the values representing the difference, in ascending order.",147,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",147,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",147,null],[11,"union","","Visits the values representing the union, in ascending order.",147,null],[11,"len","","Returns the number of elements in the set.",147,null],[11,"is_empty","","Returns true if the set contains no elements.",147,null],[11,"clear","","Clears the set, removing all values.",147,null],[11,"contains","","Returns `true` if the set contains a value.",147,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",147,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",147,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",147,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",147,null],[11,"insert","","Adds a value to the set.",147,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",147,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",147,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",147,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",147,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",147,null],[11,"from_iter","","",147,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",147,null],[11,"extend","","",147,null],[11,"extend","","",147,null],[11,"default","","",147,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",147,null],[11,"clone","","",148,null],[11,"next","","",148,null],[11,"size_hint","","",148,null],[11,"next_back","","",148,null],[11,"len","","",148,null],[11,"next","","",149,null],[11,"size_hint","","",149,null],[11,"next_back","","",149,null],[11,"len","","",149,null],[11,"clone","","",150,null],[11,"next","","",150,null],[11,"next_back","","",150,null],[11,"clone","","",151,null],[11,"next","","",151,null],[11,"size_hint","","",151,null],[11,"clone","","",152,null],[11,"next","","",152,null],[11,"size_hint","","",152,null],[11,"clone","","",153,null],[11,"next","","",153,null],[11,"size_hint","","",153,null],[11,"clone","","",154,null],[11,"next","","",154,null],[11,"size_hint","","",154,null],[11,"borrow","collections::borrow","",155,null],[11,"clone","","",155,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",155,null],[11,"into_owned","","Extracts the owned data.",155,null],[11,"deref","","",155,null],[11,"cmp","","",155,null],[11,"eq","","",155,null],[11,"partial_cmp","","",155,null],[11,"fmt","","",155,null],[11,"fmt","","",155,null],[11,"default","","",155,{"inputs":[],"output":{"name":"cow"}}],[11,"hash","","",155,null],[11,"as_ref","","",155,null],[11,"hash","collections::enum_set","",156,null],[11,"cmp","","",156,null],[11,"partial_cmp","","",156,null],[11,"lt","","",156,null],[11,"le","","",156,null],[11,"gt","","",156,null],[11,"ge","","",156,null],[11,"eq","","",156,null],[11,"ne","","",156,null],[11,"clone","","",156,null],[11,"fmt","","",156,null],[11,"new","","Returns an empty `EnumSet`.",156,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",156,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",156,null],[11,"clear","","",156,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",156,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",156,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",156,null],[11,"union","","Returns the union of both `EnumSets`.",156,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",156,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",156,null],[11,"remove","","Removes an enum from the EnumSet",156,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",156,null],[11,"iter","","Returns an iterator over an `EnumSet`.",156,null],[11,"sub","","",156,null],[11,"bitor","","",156,null],[11,"bitand","","",156,null],[11,"bitxor","","",156,null],[11,"clone","","",157,null],[11,"next","","",157,null],[11,"size_hint","","",157,null],[11,"from_iter","","",156,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",156,null],[11,"extend","","",156,null],[11,"clone","collections::linked_list","",158,null],[11,"clone","","",159,null],[11,"default","","",160,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",160,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",160,null],[11,"iter","","Provides a forward iterator.",160,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",160,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",160,null],[11,"len","","Returns the length of the `LinkedList`.",160,null],[11,"clear","","Removes all elements from the `LinkedList`.",160,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",160,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",160,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",160,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",160,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",160,null],[11,"push_front","","Adds an element first in the list.",160,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",160,null],[11,"push_back","","Appends an element to the back of a list",160,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",160,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",160,null],[11,"front_place","","Returns a place for insertion at the front of the list.",160,null],[11,"back_place","","Returns a place for insertion at the back of the list.",160,null],[11,"drop","","",160,null],[11,"next","","",158,null],[11,"size_hint","","",158,null],[11,"next_back","","",158,null],[11,"next","","",161,null],[11,"size_hint","","",161,null],[11,"next_back","","",161,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",161,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",161,null],[11,"next","","",159,null],[11,"size_hint","","",159,null],[11,"next_back","","",159,null],[11,"from_iter","","",160,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",160,null],[11,"extend","","",160,null],[11,"extend","","",160,null],[11,"eq","","",160,null],[11,"ne","","",160,null],[11,"partial_cmp","","",160,null],[11,"cmp","","",160,null],[11,"clone","","",160,null],[11,"fmt","","",160,null],[11,"hash","","",160,null],[11,"make_place","","",162,null],[11,"pointer","","",162,null],[11,"finalize","","",162,null],[11,"make_place","","",163,null],[11,"pointer","","",163,null],[11,"finalize","","",163,null],[11,"start","core::ops","",11,null],[11,"end","","",12,null],[11,"start","","",10,null],[11,"end","","",10,null],[11,"borrow","collections::vec","",134,null],[11,"borrow_mut","","",134,null],[11,"clone","collections::str","",164,null],[11,"next","","",164,null],[11,"size_hint","","",164,null],[11,"borrow","collections::string","",165,null],[11,"cmp","","",165,null],[11,"partial_cmp","","",165,null],[11,"lt","","",165,null],[11,"le","","",165,null],[11,"gt","","",165,null],[11,"ge","","",165,null],[11,"fmt","","",166,null],[11,"fmt","","",167,null],[11,"new","","Creates a new empty `String`.",165,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",165,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",165,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",165,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",165,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",165,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",165,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",165,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",165,null],[11,"as_str","","Extracts a string slice containing the entire string.",165,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",165,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",165,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",165,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",165,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",165,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",165,null],[11,"push","","Appends the given `char` to the end of this `String`.",165,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",165,null],[11,"truncate","","Shortens this `String` to the specified length.",165,null],[11,"pop","","Removes the last character from the string buffer and returns it.",165,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",165,null],[11,"insert","","Inserts a character into this `String` at a byte position.",165,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",165,null],[11,"len","","Returns the length of this `String`, in bytes.",165,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",165,null],[11,"clear","","Truncates this `String`, removing all contents.",165,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",165,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",165,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",166,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",166,null],[11,"fmt","","",166,null],[11,"fmt","","",167,null],[11,"clone","","",165,null],[11,"clone_from","","",165,null],[11,"from_iter","","",165,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",165,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",165,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",165,null],[11,"extend","","",165,null],[11,"extend","","",165,null],[11,"extend","","",165,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"eq","collections::borrow","",155,null],[11,"ne","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"eq","collections::string","",165,null],[11,"ne","","",165,null],[11,"default","","",165,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",165,null],[11,"fmt","","",165,null],[11,"hash","","",165,null],[11,"add","","",165,null],[11,"index","","",165,null],[11,"index","","",165,null],[11,"index","","",165,null],[11,"index","","",165,null],[11,"index","","",165,null],[11,"index","","",165,null],[11,"index_mut","","",165,null],[11,"index_mut","","",165,null],[11,"index_mut","","",165,null],[11,"index_mut","","",165,null],[11,"index_mut","","",165,null],[11,"index_mut","","",165,null],[11,"deref","","",165,null],[11,"deref_mut","","",165,null],[11,"from_str","","",165,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",168,null],[11,"fmt","","",168,null],[11,"fmt","","",168,null],[11,"eq","","",168,null],[11,"as_ref","","",165,null],[11,"as_ref","","",165,null],[11,"from","","",165,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",155,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",155,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",165,null],[11,"write_str","","",165,null],[11,"write_char","","",165,null],[11,"drop","","",169,null],[11,"next","","",169,null],[11,"size_hint","","",169,null],[11,"next_back","","",169,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",134,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",134,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",134,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",134,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",134,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",134,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",134,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",134,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",134,null],[11,"as_slice","","Extracts a slice containing the entire vector.",134,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",134,null],[11,"set_len","","Sets the length of a vector.",134,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",134,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",134,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",134,null],[11,"retain","","Retains only the elements specified by the predicate.",134,null],[11,"push","","Appends an element to the back of a collection.",134,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",134,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",134,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",134,null],[11,"clear","","Clears the vector, removing all values.",134,null],[11,"len","","Returns the number of elements in the vector.",134,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",134,null],[11,"split_off","","Splits the collection into two at the given index.",134,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",134,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",134,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",134,null],[11,"clone","","",134,null],[11,"clone_from","","",134,null],[11,"hash","","",134,null],[11,"index","","",134,null],[11,"index_mut","","",134,null],[11,"index","","",134,null],[11,"index","","",134,null],[11,"index","","",134,null],[11,"index","","",134,null],[11,"index","","",134,null],[11,"index","","",134,null],[11,"index_mut","","",134,null],[11,"index_mut","","",134,null],[11,"index_mut","","",134,null],[11,"index_mut","","",134,null],[11,"index_mut","","",134,null],[11,"index_mut","","",134,null],[11,"deref","","",134,null],[11,"deref_mut","","",134,null],[11,"from_iter","","",134,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",134,null],[11,"extend","","",134,null],[11,"extend","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","collections::borrow","",155,null],[11,"ne","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"eq","collections::vec","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"partial_cmp","","",134,null],[11,"cmp","","",134,null],[11,"drop","","",134,null],[11,"default","","",134,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",134,null],[11,"as_ref","","",134,null],[11,"as_mut","","",134,null],[11,"as_ref","","",134,null],[11,"as_mut","","",134,null],[11,"from","","",134,null],[11,"from","","",134,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",155,null],[11,"from","","",155,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",155,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",170,null],[11,"size_hint","","",170,null],[11,"count","","",170,null],[11,"next_back","","",170,null],[11,"clone","","",170,null],[11,"drop","","",170,null],[11,"next","","",171,null],[11,"size_hint","","",171,null],[11,"next_back","","",171,null],[11,"drop","","",171,null],[11,"clone","collections::vec_deque","",172,null],[11,"drop","","",172,null],[11,"default","","",172,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",172,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",172,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",172,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",172,null],[11,"swap","","Swaps elements at indices `i` and `j`.",172,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",172,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",172,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",172,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",172,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",172,null],[11,"iter","","Returns a front-to-back iterator.",172,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",172,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",172,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",172,null],[11,"len","","Returns the number of elements in the `VecDeque`.",172,null],[11,"is_empty","","Returns true if the buffer contains no elements",172,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",172,null],[11,"clear","","Clears the buffer, removing all values.",172,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",172,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",172,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",172,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",172,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",172,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",172,null],[11,"push_front","","Inserts an element first in the sequence.",172,null],[11,"push_back","","Appends an element to the back of a buffer",172,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",172,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",172,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",172,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",172,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",172,null],[11,"split_off","","Splits the collection into two at the given index.",172,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",172,null],[11,"retain","","Retains only the elements specified by the predicate.",172,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",172,null],[11,"clone","","",173,null],[11,"next","","",173,null],[11,"size_hint","","",173,null],[11,"next_back","","",173,null],[11,"next","","",174,null],[11,"size_hint","","",174,null],[11,"next_back","","",174,null],[11,"clone","","",175,null],[11,"next","","",175,null],[11,"size_hint","","",175,null],[11,"next_back","","",175,null],[11,"drop","","",176,null],[11,"next","","",176,null],[11,"size_hint","","",176,null],[11,"next_back","","",176,null],[11,"eq","","",172,null],[11,"partial_cmp","","",172,null],[11,"cmp","","",172,null],[11,"hash","","",172,null],[11,"index","","",172,null],[11,"index_mut","","",172,null],[11,"from_iter","","",172,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",172,null],[11,"extend","","",172,null],[11,"extend","","",172,null],[11,"fmt","","",172,null],[11,"from","","",172,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",134,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",177,null],[11,"ne","","",177,null],[11,"hash","","",177,null],[11,"fmt","","",177,null],[11,"clone","","",177,null],[11,"clone","alloc::boxed","",178,null],[11,"pointer","","",179,null],[11,"make_place","","",179,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",179,null],[11,"finalize","","",180,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",178,null],[11,"drop","","",179,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",180,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",180,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",180,null],[11,"default","","",180,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",180,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",180,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",180,null],[11,"clone","","",180,null],[11,"eq","","",180,null],[11,"ne","","",180,null],[11,"partial_cmp","","",180,null],[11,"lt","","",180,null],[11,"le","","",180,null],[11,"ge","","",180,null],[11,"gt","","",180,null],[11,"cmp","","",180,null],[11,"hash","","",180,null],[11,"from","","",180,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",180,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",180,null],[11,"fmt","","",180,null],[11,"fmt","","",180,null],[11,"fmt","","",180,null],[11,"deref","","",180,null],[11,"deref_mut","","",180,null],[11,"next","","",180,null],[11,"size_hint","","",180,null],[11,"next_back","","",180,null],[11,"call_once","","",180,null],[11,"call_once","","",180,null],[11,"clone","","",180,null],[11,"borrow","","",180,null],[11,"borrow_mut","","",180,null],[11,"as_ref","","",180,null],[11,"as_mut","","",180,null],[11,"is_contained_in","serde::core::str::pattern","Checks whether the pattern matches anywhere in the haystack",181,null],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",181,null],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",181,null],[11,"next_match","","Find the next `Match` result. See `next()`",182,null],[11,"next_reject","","Find the next `Reject` result. See `next()`",182,null],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",183,null],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",183,null],[11,"size_hint","serde::core::iter","Returns the bounds on the remaining length of the iterator.",184,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",184,null],[11,"last","","Consumes the iterator, returning the last element.",184,null],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",184,null],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",184,null],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",184,null],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",184,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",184,null],[11,"filter_map","","Creates an iterator that both filters and maps.",184,null],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",184,null],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",184,null],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",184,null],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",184,null],[11,"skip","","Creates an iterator that skips the first `n` elements.",184,null],[11,"take","","Creates an iterator that yields its first `n` elements.",184,null],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",184,null],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",184,null],[11,"fuse","","Creates an iterator which ends after the first `None`.",184,null],[11,"inspect","","Do something with each element of an iterator, passing the value on.",184,null],[11,"by_ref","","Borrows an iterator, rather than consuming it.",184,null],[11,"collect","","Transforms an iterator into a collection.",184,null],[11,"partition","","Consumes an iterator, creating two collections from it.",184,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",184,null],[11,"all","","Tests if every element of the iterator matches a predicate.",184,null],[11,"any","","Tests if any element of the iterator matches a predicate.",184,null],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",184,null],[11,"position","","Searches for an element in an iterator, returning its index.",184,null],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",184,null],[11,"max","","Returns the maximum element of an iterator.",184,null],[11,"min","","Returns the minimum element of an iterator.",184,null],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",184,null],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",184,null],[11,"rev","","Reverses an iterator&#39;s direction.",184,null],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",184,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",184,null],[11,"cycle","","Repeats an iterator endlessly.",184,null],[11,"sum","","Sums the elements of an iterator.",184,null],[11,"product","","Iterates over the entire iterator, multiplying all the elements",184,null],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",184,null],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",184,null],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",184,null],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",184,null],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",184,null],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",184,null],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",184,null],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",184,null],[11,"len","","Returns the exact number of times the iterator will iterate.",185,null],[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"ByteBuf","serde::bytes","`ByteBuf` wraps a `Vec&lt;u8&gt;` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[3,"Bytes","","`Bytes` wraps a `&amp;[u8]` in order to serialize into a byte array.",null,null],[11,"cmp","","",186,null],[11,"partial_cmp","","",186,null],[11,"lt","","",186,null],[11,"le","","",186,null],[11,"gt","","",186,null],[11,"ge","","",186,null],[11,"eq","","",186,null],[11,"ne","","",186,null],[11,"hash","","",186,null],[11,"default","","",186,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"clone","","",186,null],[11,"new","","Construct a new, empty `ByteBuf`.",186,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",186,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",186,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",186,null],[11,"into","","",186,null],[11,"from","","",186,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",186,null],[11,"as_ref","","",186,null],[11,"as_mut","","",186,null],[11,"as_mut","","",186,null],[11,"deref","","",186,null],[11,"deref_mut","","",186,null],[11,"serialize","","",186,null],[11,"visit_unit","","",187,null],[11,"visit_seq","","",187,null],[11,"visit_bytes","","",187,null],[11,"visit_byte_buf","","",187,null],[11,"deserialize","","",186,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"cmp","","",188,null],[11,"partial_cmp","","",188,null],[11,"lt","","",188,null],[11,"le","","",188,null],[11,"gt","","",188,null],[11,"ge","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"hash","","",188,null],[11,"clone","","",188,null],[11,"new","","Wrap an existing `&amp;[u8]`.",188,null],[11,"fmt","","",188,null],[11,"from","","",188,null],[11,"from","","",188,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",188,null],[11,"deref","","",188,null],[11,"serialize","","",188,null],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",189,null],[13,"Usize","","Represents a `usize` type.",189,null],[13,"U8","","Represents a `u8` type.",189,null],[13,"U16","","Represents a `u16` type.",189,null],[13,"U32","","Represents a `u32` type.",189,null],[13,"U64","","Represents a `u64` type.",189,null],[13,"Isize","","Represents a `isize` type.",189,null],[13,"I8","","Represents a `i8` type.",189,null],[13,"I16","","Represents a `i16` type.",189,null],[13,"I32","","Represents a `i32` type.",189,null],[13,"I64","","Represents a `i64` type.",189,null],[13,"F32","","Represents a `f32` type.",189,null],[13,"F64","","Represents a `f64` type.",189,null],[13,"Char","","Represents a `char` type.",189,null],[13,"Str","","Represents a `&amp;str` type.",189,null],[13,"String","","Represents a `String` type.",189,null],[13,"Unit","","Represents a `()` type.",189,null],[13,"Option","","Represents an `Option&lt;T&gt;` type.",189,null],[13,"Seq","","Represents a sequence type.",189,null],[13,"Map","","Represents a map type.",189,null],[13,"UnitStruct","","Represents a unit struct type.",189,null],[13,"NewtypeStruct","","Represents a newtype type.",189,null],[13,"TupleStruct","","Represents a tuple struct type.",189,null],[13,"Struct","","Represents a struct type.",189,null],[13,"FieldName","","Represents a struct field name.",189,null],[13,"Tuple","","Represents a tuple type.",189,null],[13,"Enum","","Represents an `enum` type.",189,null],[13,"VariantName","","Represents an enum variant name.",189,null],[13,"StructVariant","","Represents a struct variant.",189,null],[13,"TupleVariant","","Represents a tuple variant.",189,null],[13,"UnitVariant","","Represents a unit variant.",189,null],[13,"Bytes","","Represents a `&amp;[u8]` type.",189,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"TupleVisitor13","","Construct a tuple visitor.",null,null],[3,"TupleVisitor14","","Construct a tuple visitor.",null,null],[3,"TupleVisitor15","","Construct a tuple visitor.",null,null],[3,"TupleVisitor16","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements\nDeserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",190,null],[11,"visit_seq","","",190,null],[11,"visit_bool","","",191,null],[11,"visit_str","","",191,null],[11,"deserialize","collections::string","",165,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::option","",63,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","serde::de::impls","",192,null],[11,"deserialize","core::marker","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",193,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",193,null],[11,"visit_seq","","",193,null],[11,"deserialize","collections::binary_heap","",130,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",194,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",194,null],[11,"visit_seq","","",194,null],[11,"deserialize","collections::btree::set","",147,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",195,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",195,null],[11,"visit_seq","","",195,null],[11,"deserialize","collections::linked_list","",160,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",196,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",196,null],[11,"visit_seq","","",196,null],[11,"deserialize","std::collections::hash::set","",197,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",198,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",198,null],[11,"visit_seq","","",198,null],[11,"deserialize","collections::vec","",134,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",199,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",199,null],[11,"visit_seq","","",199,null],[11,"deserialize","collections::vec_deque","",172,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `TupleVisitor*&lt;T&gt;`.",200,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",200,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",201,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",201,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",202,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",202,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",203,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",203,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",204,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",204,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",205,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",205,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",206,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",206,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",207,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",207,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",208,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",208,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",209,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",209,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",210,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",210,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",211,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",211,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",212,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",212,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",213,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",213,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",214,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",214,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",215,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",215,null],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",216,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",216,null],[11,"visit_map","","",216,null],[11,"deserialize","collections::btree::map","",135,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `MapVisitor*&lt;T&gt;`.",217,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",217,null],[11,"visit_map","","",217,null],[11,"deserialize","std::collections::hash::map","",218,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::ip","",219,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",220,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::addr","",221,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",222,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",223,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::path","",224,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::boxed","",180,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",180,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",180,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::arc","",225,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::rc","",226,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","collections::borrow","",155,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::time::duration","",227,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::result","",68,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::de::impls","",228,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",229,null],[13,"InvalidType","","The value had an incorrect type.",229,null],[13,"InvalidLength","","The value had an invalid length.",229,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",229,null],[13,"EndOfStream","","EOF while deserializing a value.",229,null],[13,"UnknownVariant","","Unknown variant in enum.",229,null],[13,"UnknownField","","Unknown field in struct.",229,null],[13,"MissingField","","Struct is missing a field.",229,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",230,null],[10,"into_deserializer","","Convert this value into a deserializer.",230,null],[11,"eq","","",229,null],[11,"ne","","",229,null],[11,"fmt","","",229,null],[11,"clone","","",229,null],[11,"custom","","",229,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",229,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",229,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",229,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",229,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",229,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",229,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",229,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",229,null],[11,"description","","",229,null],[11,"cause","","",229,null],[11,"deserialize_bool","","",231,null],[11,"deserialize_usize","","",231,null],[11,"deserialize_u8","","",231,null],[11,"deserialize_u16","","",231,null],[11,"deserialize_u32","","",231,null],[11,"deserialize_u64","","",231,null],[11,"deserialize_isize","","",231,null],[11,"deserialize_i8","","",231,null],[11,"deserialize_i16","","",231,null],[11,"deserialize_i32","","",231,null],[11,"deserialize_i64","","",231,null],[11,"deserialize_f32","","",231,null],[11,"deserialize_f64","","",231,null],[11,"deserialize_char","","",231,null],[11,"deserialize_str","","",231,null],[11,"deserialize_string","","",231,null],[11,"deserialize_unit","","",231,null],[11,"deserialize_seq","","",231,null],[11,"deserialize_seq_fixed_size","","",231,null],[11,"deserialize_bytes","","",231,null],[11,"deserialize_map","","",231,null],[11,"deserialize_unit_struct","","",231,null],[11,"deserialize_newtype_struct","","",231,null],[11,"deserialize_tuple_struct","","",231,null],[11,"deserialize_struct","","",231,null],[11,"deserialize_struct_field","","",231,null],[11,"deserialize_tuple","","",231,null],[11,"deserialize_enum","","",231,null],[11,"deserialize_ignored_any","","",231,null],[11,"deserialize","","",231,null],[11,"deserialize_option","","",231,null],[11,"deserialize_bool","","",232,null],[11,"deserialize_usize","","",232,null],[11,"deserialize_u8","","",232,null],[11,"deserialize_u16","","",232,null],[11,"deserialize_u32","","",232,null],[11,"deserialize_u64","","",232,null],[11,"deserialize_isize","","",232,null],[11,"deserialize_i8","","",232,null],[11,"deserialize_i16","","",232,null],[11,"deserialize_i32","","",232,null],[11,"deserialize_i64","","",232,null],[11,"deserialize_f32","","",232,null],[11,"deserialize_f64","","",232,null],[11,"deserialize_char","","",232,null],[11,"deserialize_str","","",232,null],[11,"deserialize_string","","",232,null],[11,"deserialize_unit","","",232,null],[11,"deserialize_option","","",232,null],[11,"deserialize_seq","","",232,null],[11,"deserialize_seq_fixed_size","","",232,null],[11,"deserialize_bytes","","",232,null],[11,"deserialize_map","","",232,null],[11,"deserialize_unit_struct","","",232,null],[11,"deserialize_newtype_struct","","",232,null],[11,"deserialize_tuple_struct","","",232,null],[11,"deserialize_struct","","",232,null],[11,"deserialize_struct_field","","",232,null],[11,"deserialize_tuple","","",232,null],[11,"deserialize_enum","","",232,null],[11,"deserialize_ignored_any","","",232,null],[11,"deserialize","","",232,null],[11,"deserialize_bool","","",233,null],[11,"deserialize_usize","","",233,null],[11,"deserialize_u8","","",233,null],[11,"deserialize_u16","","",233,null],[11,"deserialize_u32","","",233,null],[11,"deserialize_u64","","",233,null],[11,"deserialize_isize","","",233,null],[11,"deserialize_i8","","",233,null],[11,"deserialize_i16","","",233,null],[11,"deserialize_i32","","",233,null],[11,"deserialize_i64","","",233,null],[11,"deserialize_f32","","",233,null],[11,"deserialize_f64","","",233,null],[11,"deserialize_char","","",233,null],[11,"deserialize_str","","",233,null],[11,"deserialize_string","","",233,null],[11,"deserialize_unit","","",233,null],[11,"deserialize_option","","",233,null],[11,"deserialize_seq","","",233,null],[11,"deserialize_seq_fixed_size","","",233,null],[11,"deserialize_bytes","","",233,null],[11,"deserialize_map","","",233,null],[11,"deserialize_unit_struct","","",233,null],[11,"deserialize_newtype_struct","","",233,null],[11,"deserialize_tuple_struct","","",233,null],[11,"deserialize_struct","","",233,null],[11,"deserialize_struct_field","","",233,null],[11,"deserialize_tuple","","",233,null],[11,"deserialize_enum","","",233,null],[11,"deserialize_ignored_any","","",233,null],[11,"deserialize","","",233,null],[11,"deserialize_bool","","",234,null],[11,"deserialize_usize","","",234,null],[11,"deserialize_u8","","",234,null],[11,"deserialize_u16","","",234,null],[11,"deserialize_u32","","",234,null],[11,"deserialize_u64","","",234,null],[11,"deserialize_isize","","",234,null],[11,"deserialize_i8","","",234,null],[11,"deserialize_i16","","",234,null],[11,"deserialize_i32","","",234,null],[11,"deserialize_i64","","",234,null],[11,"deserialize_f32","","",234,null],[11,"deserialize_f64","","",234,null],[11,"deserialize_char","","",234,null],[11,"deserialize_str","","",234,null],[11,"deserialize_string","","",234,null],[11,"deserialize_unit","","",234,null],[11,"deserialize_option","","",234,null],[11,"deserialize_seq","","",234,null],[11,"deserialize_seq_fixed_size","","",234,null],[11,"deserialize_bytes","","",234,null],[11,"deserialize_map","","",234,null],[11,"deserialize_unit_struct","","",234,null],[11,"deserialize_newtype_struct","","",234,null],[11,"deserialize_tuple_struct","","",234,null],[11,"deserialize_struct","","",234,null],[11,"deserialize_struct_field","","",234,null],[11,"deserialize_tuple","","",234,null],[11,"deserialize_enum","","",234,null],[11,"deserialize_ignored_any","","",234,null],[11,"deserialize","","",234,null],[11,"deserialize_bool","","",235,null],[11,"deserialize_usize","","",235,null],[11,"deserialize_u8","","",235,null],[11,"deserialize_u16","","",235,null],[11,"deserialize_u32","","",235,null],[11,"deserialize_u64","","",235,null],[11,"deserialize_isize","","",235,null],[11,"deserialize_i8","","",235,null],[11,"deserialize_i16","","",235,null],[11,"deserialize_i32","","",235,null],[11,"deserialize_i64","","",235,null],[11,"deserialize_f32","","",235,null],[11,"deserialize_f64","","",235,null],[11,"deserialize_char","","",235,null],[11,"deserialize_str","","",235,null],[11,"deserialize_string","","",235,null],[11,"deserialize_unit","","",235,null],[11,"deserialize_option","","",235,null],[11,"deserialize_seq","","",235,null],[11,"deserialize_seq_fixed_size","","",235,null],[11,"deserialize_bytes","","",235,null],[11,"deserialize_map","","",235,null],[11,"deserialize_unit_struct","","",235,null],[11,"deserialize_newtype_struct","","",235,null],[11,"deserialize_tuple_struct","","",235,null],[11,"deserialize_struct","","",235,null],[11,"deserialize_struct_field","","",235,null],[11,"deserialize_tuple","","",235,null],[11,"deserialize_enum","","",235,null],[11,"deserialize_ignored_any","","",235,null],[11,"deserialize","","",235,null],[11,"deserialize_bool","","",236,null],[11,"deserialize_usize","","",236,null],[11,"deserialize_u8","","",236,null],[11,"deserialize_u16","","",236,null],[11,"deserialize_u32","","",236,null],[11,"deserialize_u64","","",236,null],[11,"deserialize_isize","","",236,null],[11,"deserialize_i8","","",236,null],[11,"deserialize_i16","","",236,null],[11,"deserialize_i32","","",236,null],[11,"deserialize_i64","","",236,null],[11,"deserialize_f32","","",236,null],[11,"deserialize_f64","","",236,null],[11,"deserialize_char","","",236,null],[11,"deserialize_str","","",236,null],[11,"deserialize_string","","",236,null],[11,"deserialize_unit","","",236,null],[11,"deserialize_option","","",236,null],[11,"deserialize_seq","","",236,null],[11,"deserialize_seq_fixed_size","","",236,null],[11,"deserialize_bytes","","",236,null],[11,"deserialize_map","","",236,null],[11,"deserialize_unit_struct","","",236,null],[11,"deserialize_newtype_struct","","",236,null],[11,"deserialize_tuple_struct","","",236,null],[11,"deserialize_struct","","",236,null],[11,"deserialize_struct_field","","",236,null],[11,"deserialize_tuple","","",236,null],[11,"deserialize_enum","","",236,null],[11,"deserialize_ignored_any","","",236,null],[11,"deserialize","","",236,null],[11,"deserialize_bool","","",237,null],[11,"deserialize_usize","","",237,null],[11,"deserialize_u8","","",237,null],[11,"deserialize_u16","","",237,null],[11,"deserialize_u32","","",237,null],[11,"deserialize_u64","","",237,null],[11,"deserialize_isize","","",237,null],[11,"deserialize_i8","","",237,null],[11,"deserialize_i16","","",237,null],[11,"deserialize_i32","","",237,null],[11,"deserialize_i64","","",237,null],[11,"deserialize_f32","","",237,null],[11,"deserialize_f64","","",237,null],[11,"deserialize_char","","",237,null],[11,"deserialize_str","","",237,null],[11,"deserialize_string","","",237,null],[11,"deserialize_unit","","",237,null],[11,"deserialize_option","","",237,null],[11,"deserialize_seq","","",237,null],[11,"deserialize_seq_fixed_size","","",237,null],[11,"deserialize_bytes","","",237,null],[11,"deserialize_map","","",237,null],[11,"deserialize_unit_struct","","",237,null],[11,"deserialize_newtype_struct","","",237,null],[11,"deserialize_tuple_struct","","",237,null],[11,"deserialize_struct","","",237,null],[11,"deserialize_struct_field","","",237,null],[11,"deserialize_tuple","","",237,null],[11,"deserialize_enum","","",237,null],[11,"deserialize_ignored_any","","",237,null],[11,"deserialize","","",237,null],[11,"deserialize_bool","","",238,null],[11,"deserialize_usize","","",238,null],[11,"deserialize_u8","","",238,null],[11,"deserialize_u16","","",238,null],[11,"deserialize_u32","","",238,null],[11,"deserialize_u64","","",238,null],[11,"deserialize_isize","","",238,null],[11,"deserialize_i8","","",238,null],[11,"deserialize_i16","","",238,null],[11,"deserialize_i32","","",238,null],[11,"deserialize_i64","","",238,null],[11,"deserialize_f32","","",238,null],[11,"deserialize_f64","","",238,null],[11,"deserialize_char","","",238,null],[11,"deserialize_str","","",238,null],[11,"deserialize_string","","",238,null],[11,"deserialize_unit","","",238,null],[11,"deserialize_option","","",238,null],[11,"deserialize_seq","","",238,null],[11,"deserialize_seq_fixed_size","","",238,null],[11,"deserialize_bytes","","",238,null],[11,"deserialize_map","","",238,null],[11,"deserialize_unit_struct","","",238,null],[11,"deserialize_newtype_struct","","",238,null],[11,"deserialize_tuple_struct","","",238,null],[11,"deserialize_struct","","",238,null],[11,"deserialize_struct_field","","",238,null],[11,"deserialize_tuple","","",238,null],[11,"deserialize_enum","","",238,null],[11,"deserialize_ignored_any","","",238,null],[11,"deserialize","","",238,null],[11,"deserialize_bool","","",239,null],[11,"deserialize_usize","","",239,null],[11,"deserialize_u8","","",239,null],[11,"deserialize_u16","","",239,null],[11,"deserialize_u32","","",239,null],[11,"deserialize_u64","","",239,null],[11,"deserialize_isize","","",239,null],[11,"deserialize_i8","","",239,null],[11,"deserialize_i16","","",239,null],[11,"deserialize_i32","","",239,null],[11,"deserialize_i64","","",239,null],[11,"deserialize_f32","","",239,null],[11,"deserialize_f64","","",239,null],[11,"deserialize_char","","",239,null],[11,"deserialize_str","","",239,null],[11,"deserialize_string","","",239,null],[11,"deserialize_unit","","",239,null],[11,"deserialize_option","","",239,null],[11,"deserialize_seq","","",239,null],[11,"deserialize_seq_fixed_size","","",239,null],[11,"deserialize_bytes","","",239,null],[11,"deserialize_map","","",239,null],[11,"deserialize_unit_struct","","",239,null],[11,"deserialize_newtype_struct","","",239,null],[11,"deserialize_tuple_struct","","",239,null],[11,"deserialize_struct","","",239,null],[11,"deserialize_struct_field","","",239,null],[11,"deserialize_tuple","","",239,null],[11,"deserialize_enum","","",239,null],[11,"deserialize_ignored_any","","",239,null],[11,"deserialize","","",239,null],[11,"deserialize_bool","","",240,null],[11,"deserialize_usize","","",240,null],[11,"deserialize_u8","","",240,null],[11,"deserialize_u16","","",240,null],[11,"deserialize_u32","","",240,null],[11,"deserialize_u64","","",240,null],[11,"deserialize_isize","","",240,null],[11,"deserialize_i8","","",240,null],[11,"deserialize_i16","","",240,null],[11,"deserialize_i32","","",240,null],[11,"deserialize_i64","","",240,null],[11,"deserialize_f32","","",240,null],[11,"deserialize_f64","","",240,null],[11,"deserialize_char","","",240,null],[11,"deserialize_str","","",240,null],[11,"deserialize_string","","",240,null],[11,"deserialize_unit","","",240,null],[11,"deserialize_option","","",240,null],[11,"deserialize_seq","","",240,null],[11,"deserialize_seq_fixed_size","","",240,null],[11,"deserialize_bytes","","",240,null],[11,"deserialize_map","","",240,null],[11,"deserialize_unit_struct","","",240,null],[11,"deserialize_newtype_struct","","",240,null],[11,"deserialize_tuple_struct","","",240,null],[11,"deserialize_struct","","",240,null],[11,"deserialize_struct_field","","",240,null],[11,"deserialize_tuple","","",240,null],[11,"deserialize_enum","","",240,null],[11,"deserialize_ignored_any","","",240,null],[11,"deserialize","","",240,null],[11,"deserialize_bool","","",241,null],[11,"deserialize_usize","","",241,null],[11,"deserialize_u8","","",241,null],[11,"deserialize_u16","","",241,null],[11,"deserialize_u32","","",241,null],[11,"deserialize_u64","","",241,null],[11,"deserialize_isize","","",241,null],[11,"deserialize_i8","","",241,null],[11,"deserialize_i16","","",241,null],[11,"deserialize_i32","","",241,null],[11,"deserialize_i64","","",241,null],[11,"deserialize_f32","","",241,null],[11,"deserialize_f64","","",241,null],[11,"deserialize_char","","",241,null],[11,"deserialize_str","","",241,null],[11,"deserialize_string","","",241,null],[11,"deserialize_unit","","",241,null],[11,"deserialize_option","","",241,null],[11,"deserialize_seq","","",241,null],[11,"deserialize_seq_fixed_size","","",241,null],[11,"deserialize_bytes","","",241,null],[11,"deserialize_map","","",241,null],[11,"deserialize_unit_struct","","",241,null],[11,"deserialize_newtype_struct","","",241,null],[11,"deserialize_tuple_struct","","",241,null],[11,"deserialize_struct","","",241,null],[11,"deserialize_struct_field","","",241,null],[11,"deserialize_tuple","","",241,null],[11,"deserialize_enum","","",241,null],[11,"deserialize_ignored_any","","",241,null],[11,"deserialize","","",241,null],[11,"deserialize_bool","","",242,null],[11,"deserialize_usize","","",242,null],[11,"deserialize_u8","","",242,null],[11,"deserialize_u16","","",242,null],[11,"deserialize_u32","","",242,null],[11,"deserialize_u64","","",242,null],[11,"deserialize_isize","","",242,null],[11,"deserialize_i8","","",242,null],[11,"deserialize_i16","","",242,null],[11,"deserialize_i32","","",242,null],[11,"deserialize_i64","","",242,null],[11,"deserialize_f32","","",242,null],[11,"deserialize_f64","","",242,null],[11,"deserialize_char","","",242,null],[11,"deserialize_str","","",242,null],[11,"deserialize_string","","",242,null],[11,"deserialize_unit","","",242,null],[11,"deserialize_option","","",242,null],[11,"deserialize_seq","","",242,null],[11,"deserialize_seq_fixed_size","","",242,null],[11,"deserialize_bytes","","",242,null],[11,"deserialize_map","","",242,null],[11,"deserialize_unit_struct","","",242,null],[11,"deserialize_newtype_struct","","",242,null],[11,"deserialize_tuple_struct","","",242,null],[11,"deserialize_struct","","",242,null],[11,"deserialize_struct_field","","",242,null],[11,"deserialize_tuple","","",242,null],[11,"deserialize_enum","","",242,null],[11,"deserialize_ignored_any","","",242,null],[11,"deserialize","","",242,null],[11,"deserialize_bool","","",243,null],[11,"deserialize_usize","","",243,null],[11,"deserialize_u8","","",243,null],[11,"deserialize_u16","","",243,null],[11,"deserialize_u32","","",243,null],[11,"deserialize_u64","","",243,null],[11,"deserialize_isize","","",243,null],[11,"deserialize_i8","","",243,null],[11,"deserialize_i16","","",243,null],[11,"deserialize_i32","","",243,null],[11,"deserialize_i64","","",243,null],[11,"deserialize_f32","","",243,null],[11,"deserialize_f64","","",243,null],[11,"deserialize_char","","",243,null],[11,"deserialize_str","","",243,null],[11,"deserialize_string","","",243,null],[11,"deserialize_unit","","",243,null],[11,"deserialize_option","","",243,null],[11,"deserialize_seq","","",243,null],[11,"deserialize_seq_fixed_size","","",243,null],[11,"deserialize_bytes","","",243,null],[11,"deserialize_map","","",243,null],[11,"deserialize_unit_struct","","",243,null],[11,"deserialize_newtype_struct","","",243,null],[11,"deserialize_tuple_struct","","",243,null],[11,"deserialize_struct","","",243,null],[11,"deserialize_struct_field","","",243,null],[11,"deserialize_tuple","","",243,null],[11,"deserialize_enum","","",243,null],[11,"deserialize_ignored_any","","",243,null],[11,"deserialize","","",243,null],[11,"deserialize_bool","","",244,null],[11,"deserialize_usize","","",244,null],[11,"deserialize_u8","","",244,null],[11,"deserialize_u16","","",244,null],[11,"deserialize_u32","","",244,null],[11,"deserialize_u64","","",244,null],[11,"deserialize_isize","","",244,null],[11,"deserialize_i8","","",244,null],[11,"deserialize_i16","","",244,null],[11,"deserialize_i32","","",244,null],[11,"deserialize_i64","","",244,null],[11,"deserialize_f32","","",244,null],[11,"deserialize_f64","","",244,null],[11,"deserialize_char","","",244,null],[11,"deserialize_str","","",244,null],[11,"deserialize_string","","",244,null],[11,"deserialize_unit","","",244,null],[11,"deserialize_option","","",244,null],[11,"deserialize_seq","","",244,null],[11,"deserialize_seq_fixed_size","","",244,null],[11,"deserialize_bytes","","",244,null],[11,"deserialize_map","","",244,null],[11,"deserialize_unit_struct","","",244,null],[11,"deserialize_newtype_struct","","",244,null],[11,"deserialize_tuple_struct","","",244,null],[11,"deserialize_struct","","",244,null],[11,"deserialize_struct_field","","",244,null],[11,"deserialize_tuple","","",244,null],[11,"deserialize_enum","","",244,null],[11,"deserialize_ignored_any","","",244,null],[11,"deserialize","","",244,null],[11,"deserialize_bool","","",245,null],[11,"deserialize_usize","","",245,null],[11,"deserialize_u8","","",245,null],[11,"deserialize_u16","","",245,null],[11,"deserialize_u32","","",245,null],[11,"deserialize_u64","","",245,null],[11,"deserialize_isize","","",245,null],[11,"deserialize_i8","","",245,null],[11,"deserialize_i16","","",245,null],[11,"deserialize_i32","","",245,null],[11,"deserialize_i64","","",245,null],[11,"deserialize_f32","","",245,null],[11,"deserialize_f64","","",245,null],[11,"deserialize_char","","",245,null],[11,"deserialize_str","","",245,null],[11,"deserialize_string","","",245,null],[11,"deserialize_unit","","",245,null],[11,"deserialize_option","","",245,null],[11,"deserialize_seq","","",245,null],[11,"deserialize_seq_fixed_size","","",245,null],[11,"deserialize_bytes","","",245,null],[11,"deserialize_map","","",245,null],[11,"deserialize_unit_struct","","",245,null],[11,"deserialize_newtype_struct","","",245,null],[11,"deserialize_tuple_struct","","",245,null],[11,"deserialize_struct","","",245,null],[11,"deserialize_struct_field","","",245,null],[11,"deserialize_tuple","","",245,null],[11,"deserialize_enum","","",245,null],[11,"deserialize_ignored_any","","",245,null],[11,"deserialize","","",245,null],[11,"deserialize","","",246,null],[11,"deserialize_enum","","",246,null],[11,"deserialize_bool","","",246,null],[11,"deserialize_usize","","",246,null],[11,"deserialize_u8","","",246,null],[11,"deserialize_u16","","",246,null],[11,"deserialize_u32","","",246,null],[11,"deserialize_u64","","",246,null],[11,"deserialize_isize","","",246,null],[11,"deserialize_i8","","",246,null],[11,"deserialize_i16","","",246,null],[11,"deserialize_i32","","",246,null],[11,"deserialize_i64","","",246,null],[11,"deserialize_f32","","",246,null],[11,"deserialize_f64","","",246,null],[11,"deserialize_char","","",246,null],[11,"deserialize_str","","",246,null],[11,"deserialize_string","","",246,null],[11,"deserialize_unit","","",246,null],[11,"deserialize_option","","",246,null],[11,"deserialize_seq","","",246,null],[11,"deserialize_seq_fixed_size","","",246,null],[11,"deserialize_bytes","","",246,null],[11,"deserialize_map","","",246,null],[11,"deserialize_unit_struct","","",246,null],[11,"deserialize_newtype_struct","","",246,null],[11,"deserialize_tuple_struct","","",246,null],[11,"deserialize_struct","","",246,null],[11,"deserialize_struct_field","","",246,null],[11,"deserialize_tuple","","",246,null],[11,"deserialize_ignored_any","","",246,null],[11,"visit_variant","","",246,null],[11,"visit_unit","","",246,null],[11,"visit_newtype","","",246,null],[11,"visit_tuple","","",246,null],[11,"visit_struct","","",246,null],[11,"into_deserializer","collections::string","",165,null],[11,"deserialize","serde::de::value","",247,null],[11,"deserialize_enum","","",247,null],[11,"deserialize_bool","","",247,null],[11,"deserialize_usize","","",247,null],[11,"deserialize_u8","","",247,null],[11,"deserialize_u16","","",247,null],[11,"deserialize_u32","","",247,null],[11,"deserialize_u64","","",247,null],[11,"deserialize_isize","","",247,null],[11,"deserialize_i8","","",247,null],[11,"deserialize_i16","","",247,null],[11,"deserialize_i32","","",247,null],[11,"deserialize_i64","","",247,null],[11,"deserialize_f32","","",247,null],[11,"deserialize_f64","","",247,null],[11,"deserialize_char","","",247,null],[11,"deserialize_str","","",247,null],[11,"deserialize_string","","",247,null],[11,"deserialize_unit","","",247,null],[11,"deserialize_option","","",247,null],[11,"deserialize_seq","","",247,null],[11,"deserialize_seq_fixed_size","","",247,null],[11,"deserialize_bytes","","",247,null],[11,"deserialize_map","","",247,null],[11,"deserialize_unit_struct","","",247,null],[11,"deserialize_newtype_struct","","",247,null],[11,"deserialize_tuple_struct","","",247,null],[11,"deserialize_struct","","",247,null],[11,"deserialize_struct_field","","",247,null],[11,"deserialize_tuple","","",247,null],[11,"deserialize_ignored_any","","",247,null],[11,"visit_variant","","",247,null],[11,"visit_unit","","",247,null],[11,"visit_newtype","","",247,null],[11,"visit_tuple","","",247,null],[11,"visit_struct","","",247,null],[11,"into_deserializer","collections::borrow","",155,null],[11,"deserialize","serde::de::value","",248,null],[11,"deserialize_enum","","",248,null],[11,"deserialize_bool","","",248,null],[11,"deserialize_usize","","",248,null],[11,"deserialize_u8","","",248,null],[11,"deserialize_u16","","",248,null],[11,"deserialize_u32","","",248,null],[11,"deserialize_u64","","",248,null],[11,"deserialize_isize","","",248,null],[11,"deserialize_i8","","",248,null],[11,"deserialize_i16","","",248,null],[11,"deserialize_i32","","",248,null],[11,"deserialize_i64","","",248,null],[11,"deserialize_f32","","",248,null],[11,"deserialize_f64","","",248,null],[11,"deserialize_char","","",248,null],[11,"deserialize_str","","",248,null],[11,"deserialize_string","","",248,null],[11,"deserialize_unit","","",248,null],[11,"deserialize_option","","",248,null],[11,"deserialize_seq","","",248,null],[11,"deserialize_seq_fixed_size","","",248,null],[11,"deserialize_bytes","","",248,null],[11,"deserialize_map","","",248,null],[11,"deserialize_unit_struct","","",248,null],[11,"deserialize_newtype_struct","","",248,null],[11,"deserialize_tuple_struct","","",248,null],[11,"deserialize_struct","","",248,null],[11,"deserialize_struct_field","","",248,null],[11,"deserialize_tuple","","",248,null],[11,"deserialize_ignored_any","","",248,null],[11,"visit_variant","","",248,null],[11,"visit_unit","","",248,null],[11,"visit_newtype","","",248,null],[11,"visit_tuple","","",248,null],[11,"visit_struct","","",248,null],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",249,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",249,null],[11,"deserialize_bool","","",249,null],[11,"deserialize_usize","","",249,null],[11,"deserialize_u8","","",249,null],[11,"deserialize_u16","","",249,null],[11,"deserialize_u32","","",249,null],[11,"deserialize_u64","","",249,null],[11,"deserialize_isize","","",249,null],[11,"deserialize_i8","","",249,null],[11,"deserialize_i16","","",249,null],[11,"deserialize_i32","","",249,null],[11,"deserialize_i64","","",249,null],[11,"deserialize_f32","","",249,null],[11,"deserialize_f64","","",249,null],[11,"deserialize_char","","",249,null],[11,"deserialize_str","","",249,null],[11,"deserialize_string","","",249,null],[11,"deserialize_unit","","",249,null],[11,"deserialize_option","","",249,null],[11,"deserialize_seq","","",249,null],[11,"deserialize_seq_fixed_size","","",249,null],[11,"deserialize_bytes","","",249,null],[11,"deserialize_map","","",249,null],[11,"deserialize_unit_struct","","",249,null],[11,"deserialize_newtype_struct","","",249,null],[11,"deserialize_tuple_struct","","",249,null],[11,"deserialize_struct","","",249,null],[11,"deserialize_struct_field","","",249,null],[11,"deserialize_tuple","","",249,null],[11,"deserialize_enum","","",249,null],[11,"deserialize_ignored_any","","",249,null],[11,"visit","","",249,null],[11,"end","","",249,null],[11,"size_hint","","",249,null],[11,"into_deserializer","collections::vec","",134,null],[11,"into_deserializer","collections::btree::set","",147,null],[11,"into_deserializer","std::collections::hash::set","",197,null],[11,"new","serde::de::value","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",250,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",250,null],[11,"deserialize_bool","","",250,null],[11,"deserialize_usize","","",250,null],[11,"deserialize_u8","","",250,null],[11,"deserialize_u16","","",250,null],[11,"deserialize_u32","","",250,null],[11,"deserialize_u64","","",250,null],[11,"deserialize_isize","","",250,null],[11,"deserialize_i8","","",250,null],[11,"deserialize_i16","","",250,null],[11,"deserialize_i32","","",250,null],[11,"deserialize_i64","","",250,null],[11,"deserialize_f32","","",250,null],[11,"deserialize_f64","","",250,null],[11,"deserialize_char","","",250,null],[11,"deserialize_str","","",250,null],[11,"deserialize_string","","",250,null],[11,"deserialize_unit","","",250,null],[11,"deserialize_option","","",250,null],[11,"deserialize_seq","","",250,null],[11,"deserialize_seq_fixed_size","","",250,null],[11,"deserialize_bytes","","",250,null],[11,"deserialize_map","","",250,null],[11,"deserialize_unit_struct","","",250,null],[11,"deserialize_newtype_struct","","",250,null],[11,"deserialize_tuple_struct","","",250,null],[11,"deserialize_struct","","",250,null],[11,"deserialize_struct_field","","",250,null],[11,"deserialize_tuple","","",250,null],[11,"deserialize_enum","","",250,null],[11,"deserialize_ignored_any","","",250,null],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V, E&gt;` with a specific length.",251,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"unbounded","","Construct a new `MapDeserializer&lt;I, K, V, E&gt;` that is not bounded\nby a specific length and that delegates to `iter` for its size hint.",251,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deserialize","","",251,null],[11,"deserialize_seq","","",251,null],[11,"deserialize_seq_fixed_size","","",251,null],[11,"deserialize_bool","","",251,null],[11,"deserialize_usize","","",251,null],[11,"deserialize_u8","","",251,null],[11,"deserialize_u16","","",251,null],[11,"deserialize_u32","","",251,null],[11,"deserialize_u64","","",251,null],[11,"deserialize_isize","","",251,null],[11,"deserialize_i8","","",251,null],[11,"deserialize_i16","","",251,null],[11,"deserialize_i32","","",251,null],[11,"deserialize_i64","","",251,null],[11,"deserialize_f32","","",251,null],[11,"deserialize_f64","","",251,null],[11,"deserialize_char","","",251,null],[11,"deserialize_str","","",251,null],[11,"deserialize_string","","",251,null],[11,"deserialize_unit","","",251,null],[11,"deserialize_option","","",251,null],[11,"deserialize_bytes","","",251,null],[11,"deserialize_map","","",251,null],[11,"deserialize_unit_struct","","",251,null],[11,"deserialize_newtype_struct","","",251,null],[11,"deserialize_tuple_struct","","",251,null],[11,"deserialize_struct","","",251,null],[11,"deserialize_struct_field","","",251,null],[11,"deserialize_tuple","","",251,null],[11,"deserialize_enum","","",251,null],[11,"deserialize_ignored_any","","",251,null],[11,"visit_key","","",251,null],[11,"visit_value","","",251,null],[11,"end","","",251,null],[11,"size_hint","","",251,null],[11,"visit","","",251,null],[11,"end","","",251,null],[11,"size_hint","","",251,null],[11,"into_deserializer","collections::btree::map","",135,null],[11,"into_deserializer","std::collections::hash::map","",218,null],[11,"new","serde::de::value","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",252,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",252,null],[11,"deserialize_bool","","",252,null],[11,"deserialize_usize","","",252,null],[11,"deserialize_u8","","",252,null],[11,"deserialize_u16","","",252,null],[11,"deserialize_u32","","",252,null],[11,"deserialize_u64","","",252,null],[11,"deserialize_isize","","",252,null],[11,"deserialize_i8","","",252,null],[11,"deserialize_i16","","",252,null],[11,"deserialize_i32","","",252,null],[11,"deserialize_i64","","",252,null],[11,"deserialize_f32","","",252,null],[11,"deserialize_f64","","",252,null],[11,"deserialize_char","","",252,null],[11,"deserialize_str","","",252,null],[11,"deserialize_string","","",252,null],[11,"deserialize_unit","","",252,null],[11,"deserialize_option","","",252,null],[11,"deserialize_seq","","",252,null],[11,"deserialize_seq_fixed_size","","",252,null],[11,"deserialize_bytes","","",252,null],[11,"deserialize_map","","",252,null],[11,"deserialize_unit_struct","","",252,null],[11,"deserialize_newtype_struct","","",252,null],[11,"deserialize_tuple_struct","","",252,null],[11,"deserialize_struct","","",252,null],[11,"deserialize_struct_field","","",252,null],[11,"deserialize_tuple","","",252,null],[11,"deserialize_enum","","",252,null],[11,"deserialize_ignored_any","","",252,null],[11,"into_deserializer","serde::bytes","",188,null],[11,"deserialize","serde::de::value","",253,null],[11,"deserialize_bool","","",253,null],[11,"deserialize_usize","","",253,null],[11,"deserialize_u8","","",253,null],[11,"deserialize_u16","","",253,null],[11,"deserialize_u32","","",253,null],[11,"deserialize_u64","","",253,null],[11,"deserialize_isize","","",253,null],[11,"deserialize_i8","","",253,null],[11,"deserialize_i16","","",253,null],[11,"deserialize_i32","","",253,null],[11,"deserialize_i64","","",253,null],[11,"deserialize_f32","","",253,null],[11,"deserialize_f64","","",253,null],[11,"deserialize_char","","",253,null],[11,"deserialize_str","","",253,null],[11,"deserialize_string","","",253,null],[11,"deserialize_unit","","",253,null],[11,"deserialize_option","","",253,null],[11,"deserialize_seq","","",253,null],[11,"deserialize_seq_fixed_size","","",253,null],[11,"deserialize_bytes","","",253,null],[11,"deserialize_map","","",253,null],[11,"deserialize_unit_struct","","",253,null],[11,"deserialize_newtype_struct","","",253,null],[11,"deserialize_tuple_struct","","",253,null],[11,"deserialize_struct","","",253,null],[11,"deserialize_struct_field","","",253,null],[11,"deserialize_tuple","","",253,null],[11,"deserialize_enum","","",253,null],[11,"deserialize_ignored_any","","",253,null],[11,"into_deserializer","serde::bytes","",186,null],[11,"deserialize","serde::de::value","",254,null],[11,"deserialize_bool","","",254,null],[11,"deserialize_usize","","",254,null],[11,"deserialize_u8","","",254,null],[11,"deserialize_u16","","",254,null],[11,"deserialize_u32","","",254,null],[11,"deserialize_u64","","",254,null],[11,"deserialize_isize","","",254,null],[11,"deserialize_i8","","",254,null],[11,"deserialize_i16","","",254,null],[11,"deserialize_i32","","",254,null],[11,"deserialize_i64","","",254,null],[11,"deserialize_f32","","",254,null],[11,"deserialize_f64","","",254,null],[11,"deserialize_char","","",254,null],[11,"deserialize_str","","",254,null],[11,"deserialize_string","","",254,null],[11,"deserialize_unit","","",254,null],[11,"deserialize_option","","",254,null],[11,"deserialize_seq","","",254,null],[11,"deserialize_seq_fixed_size","","",254,null],[11,"deserialize_bytes","","",254,null],[11,"deserialize_map","","",254,null],[11,"deserialize_unit_struct","","",254,null],[11,"deserialize_newtype_struct","","",254,null],[11,"deserialize_tuple_struct","","",254,null],[11,"deserialize_struct","","",254,null],[11,"deserialize_struct_field","","",254,null],[11,"deserialize_tuple","","",254,null],[11,"deserialize_enum","","",254,null],[11,"deserialize_ignored_any","","",254,null],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",255,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",255,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",255,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",255,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",255,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",255,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",255,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",255,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the\nsame struct field.",255,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",256,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",257,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",257,null],[10,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",257,null],[10,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.\nA reasonable default is to forward to `deserialize_u64`.",257,null],[10,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.\nA reasonable default is to forward to `deserialize_u64`.",257,null],[10,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.\nA reasonable default is to forward to `deserialize_u64`.",257,null],[10,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.\nA reasonable default is to forward to `deserialize_u64`.",257,null],[10,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",257,null],[10,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.\nA reasonable default is to forward to `deserialize_i64`.",257,null],[10,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.\nA reasonable default is to forward to `deserialize_i64`.",257,null],[10,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.\nA reasonable default is to forward to `deserialize_i64`.",257,null],[10,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.\nA reasonable default is to forward to `deserialize_i64`.",257,null],[10,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",257,null],[10,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.\nA reasonable default is to forward to `deserialize_f64`.",257,null],[10,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",257,null],[10,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",257,null],[10,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&amp;str` value.",257,null],[10,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",257,null],[10,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",257,null],[10,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",257,null],[10,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",257,null],[10,"deserialize_seq_fixed_size","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows\ndeserializers to parse arrays that aren&#39;t tagged as arrays.",257,null],[10,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec&lt;u8&gt;`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",257,null],[10,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",257,null],[10,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren&#39;t tagged as a unit struct.",257,null],[10,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren&#39;t tagged as a newtype struct.\nA reasonable default is to simply deserialize the expected value directly.",257,null],[10,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",257,null],[10,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",257,null],[10,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field\nname.  This allows deserializers to choose between &amp;str, usize, or &amp;[u8] to properly\ndeserialize a struct field.",257,null],[10,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",257,null],[10,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",257,null],[10,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",257,null],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",258,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",258,null],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",258,null],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",258,null],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",258,null],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",258,null],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",258,null],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",258,null],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",258,null],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",258,null],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",258,null],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",258,null],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",258,null],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",258,null],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",258,null],[11,"visit_str","","`visit_str` deserializes a `&amp;str` into a `Value`.",258,null],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid\na copy if it is deserializing a string from a `String` type.  By default it passes a `&amp;str`\nto the `visit_str` method.",258,null],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",258,null],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",258,null],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",258,null],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",258,null],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",258,null],[11,"visit_seq","","`visit_seq` deserializes a `SeqVisitor` into a `Value`.",258,null],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",258,null],[11,"visit_bytes","","`visit_bytes` deserializes a `&amp;[u8]` into a `Value`.",258,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec&lt;u8&gt;` into a `Value`.",258,null],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",259,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",259,null],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",259,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",259,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",260,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",260,null],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",260,null],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",260,null],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",260,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",260,null],[11,"missing_field","","Report that the struct has a field that wasn&#39;t deserialized",260,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",261,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",261,null],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",262,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",262,null],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",262,null],[10,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value.\nA good default is often to use the `visit_tuple` method to deserialize a `(value,)`.",262,null],[10,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.\nIf no tuple variants are expected, yield a\n`Err(serde::de::Error::invalid_type(serde::de::Type::TupleVariant))`",262,null],[10,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.\nIf no struct variants are expected, yield a\n`Err(serde::de::Error::invalid_type(serde::de::Type::StructVariant))`",262,null],[11,"fmt","","",189,null],[11,"eq","","",189,null],[11,"clone","","",189,null],[11,"fmt","","",189,null],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position&#39;s line and column.",null,null],[11,"new","","Construct a new `LineColIterator&lt;Iter&gt;`.",263,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",263,null],[11,"col","","Report the current column inside the iterator.",263,null],[11,"get_ref","","Gets a reference to the underlying iterator.",263,null],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",263,null],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",263,null],[11,"peek","","peeks at the next value",263,null],[11,"next","","",263,null],[0,"ser","serde","Generic serialization framework.\n# For Developers who want to serialize objects\nImplement the `Serialize` trait for the type of objects you want to serialize. Call methods of\nthe `serializer` object. For which methods to call and how to do so, look at the documentation\nof the `Serializer` trait.",null,null],[0,"impls","serde::ser","Implementations for all of Rust&#39;s builtin types. Tuples implement the `Serialize` trait if they\nhave at most 16 fields. Arrays implement the `Serialize` trait if their length is 32 or less.\nYou can always forward array serialization to slice serialization, which works for any length.\nLong tuples are best replaced by tuple structs, for which you can use `derive(Serialize)`. In\nthat case the number of fields is irrelevant.",null,null],[11,"serialize","collections::string","",165,null],[11,"serialize","core::option","",63,null],[11,"serialize","core::marker","",8,null],[11,"serialize","collections::binary_heap","",130,null],[11,"serialize","collections::btree::set","",147,null],[11,"serialize","std::collections::hash::set","",197,null],[11,"serialize","collections::linked_list","",160,null],[11,"serialize","collections::vec","",134,null],[11,"serialize","collections::vec_deque","",172,null],[11,"serialize","collections::btree::map","",135,null],[11,"serialize","std::collections::hash::map","",218,null],[11,"serialize","alloc::boxed","",180,null],[11,"serialize","alloc::rc","",226,null],[11,"serialize","alloc::arc","",225,null],[11,"serialize","collections::borrow","",155,null],[11,"serialize","core::result","",68,null],[11,"serialize","std::time::duration","",227,null],[11,"serialize","std::net::ip","",219,null],[11,"serialize","","",220,null],[11,"serialize","std::net::addr","",221,null],[11,"serialize","","",222,null],[11,"serialize","","",223,null],[11,"serialize","std::path","",264,null],[11,"serialize","","",224,null],[8,"Error","serde::ser","`Error` is a trait that allows a `Serialize` to generically create a\n`Serializer` error.",null,null],[10,"custom","","Raised when there is a general error when serializing a type.",265,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",265,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",266,null],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",267,null],[16,"SeqState","","A state object that is initialized by `serialize_seq`, passed to\n`serialize_seq_elt`, and consumed by `serialize_seq_end`. Use `()` if no\nstate is required.",267,null],[16,"TupleState","","A state object that is initialized by `serialize_tuple`, passed to\n`serialize_tuple_elt`, and consumed by `serialize_tuple_end`. Use `()`\nif no state is required.",267,null],[16,"TupleStructState","","A state object that is initialized by `serialize_tuple_struct`, passed\nto `serialize_tuple_struct_elt`, and consumed by\n`serialize_tuple_struct_end`. Use `()` if no state is required.",267,null],[16,"TupleVariantState","","A state object that is initialized by `serialize_tuple_variant`, passed\nto `serialize_tuple_variant_elt`, and consumed by\n`serialize_tuple_variant_end`. Use `()` if no state is required.",267,null],[16,"MapState","","A state object that is initialized by `serialize_map`, passed to\n`serialize_map_elt`, and consumed by `serialize_map_end`. Use `()` if no\nstate is required.",267,null],[16,"StructState","","A state object that is initialized by `serialize_struct`, passed to\n`serialize_struct_elt`, and consumed by `serialize_struct_end`. Use `()`\nif no state is required.",267,null],[16,"StructVariantState","","A state object that is initialized by `serialize_struct_variant`, passed\nto `serialize_struct_variant_elt`, and consumed by\n`serialize_struct_variant_end`. Use `()` if no state is required.",267,null],[10,"serialize_bool","","Serializes a `bool` value.",267,null],[10,"serialize_isize","","Serializes an `isize` value. If the format does not differentiate\nbetween `isize` and `i64`, a reasonable implementation would be to cast\nthe value to `i64` and forward to `serialize_i64`.",267,null],[10,"serialize_i8","","Serializes an `i8` value. If the format does not differentiate between\n`i8` and `i64`, a reasonable implementation would be to cast the value\nto `i64` and forward to `serialize_i64`.",267,null],[10,"serialize_i16","","Serializes an `i16` value. If the format does not differentiate between\n`i16` and `i64`, a reasonable implementation would be to cast the value\nto `i64` and forward to `serialize_i64`.",267,null],[10,"serialize_i32","","Serializes an `i32` value. If the format does not differentiate between\n`i32` and `i64`, a reasonable implementation would be to cast the value\nto `i64` and forward to `serialize_i64`.",267,null],[10,"serialize_i64","","Serializes an `i64` value.",267,null],[10,"serialize_usize","","Serializes a `usize` value. If the format does not differentiate between\n`usize` and `u64`, a reasonable implementation would be to cast the\nvalue to `u64` and forward to `serialize_u64`.",267,null],[10,"serialize_u8","","Serializes a `u8` value. If the format does not differentiate between\n`u8` and `u64`, a reasonable implementation would be to cast the value\nto `u64` and forward to `serialize_u64`.",267,null],[10,"serialize_u16","","Serializes a `u16` value. If the format does not differentiate between\n`u16` and `u64`, a reasonable implementation would be to cast the value\nto `u64` and forward to `serialize_u64`.",267,null],[10,"serialize_u32","","Serializes a `u32` value. If the format does not differentiate between\n`u32` and `u64`, a reasonable implementation would be to cast the value\nto `u64` and forward to `serialize_u64`.",267,null],[10,"serialize_u64","","`Serializes a `u64` value.",267,null],[10,"serialize_f32","","Serializes an `f32` value. If the format does not differentiate between\n`f32` and `f64`, a reasonable implementation would be to cast the value\nto `f64` and forward to `serialize_f64`.",267,null],[10,"serialize_f64","","Serializes an `f64` value.",267,null],[10,"serialize_char","","Serializes a character. If the format does not support characters,\nit is reasonable to serialize it as a single element `str` or a `u32`.",267,null],[10,"serialize_str","","Serializes a `&amp;str`.",267,null],[10,"serialize_bytes","","Enables serializers to serialize byte slices more compactly or more\nefficiently than other types of slices. If no efficient implementation\nis available, a reasonable implementation would be to forward to\n`serialize_seq`. If forwarded, the implementation looks usually just like this:\n```rust\nlet mut state = try!(self.serialize_seq(value));\nfor b in value {\n    try!(self.serialize_seq_elt(&amp;mut state, b));\n}\nself.serialize_seq_end(state)\n```",267,null],[10,"serialize_unit","","Serializes a `()` value. It&#39;s reasonable to just not serialize anything.",267,null],[10,"serialize_unit_struct","","Serializes a unit struct value. A reasonable implementation would be to\nforward to `serialize_unit`.",267,null],[10,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no\narguments. A reasonable implementation would be to forward to\n`serialize_unit`.",267,null],[10,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a newtype\nstruct, to be more efficiently serialized than a tuple struct with\nmultiple items. A reasonable implementation would be to forward to\n`serialize_tuple_struct` or to just serialize the inner value without wrapping.",267,null],[10,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently serialized\nthan a variant with multiple items. A reasonable implementation would be\nto forward to `serialize_tuple_variant`.",267,null],[10,"serialize_none","","Serializes a `None` value.",267,null],[10,"serialize_some","","Serializes a `Some(...)` value.",267,null],[10,"serialize_seq","","Begins to serialize a sequence. This call must be followed by zero or\nmore calls to `serialize_seq_elt`, then a call to `serialize_seq_end`.",267,null],[10,"serialize_seq_elt","","Serializes a sequence element. Must have previously called\n`serialize_seq`.",267,null],[10,"serialize_seq_end","","Finishes serializing a sequence.",267,null],[10,"serialize_seq_fixed_size","","Begins to serialize a sequence whose length will be known at\ndeserialization time. This call must be followed by zero or more calls\nto `serialize_seq_elt`, then a call to `serialize_seq_end`. A reasonable\nimplementation would be to forward to `serialize_seq`.",267,null],[10,"serialize_tuple","","Begins to serialize a tuple. This call must be followed by zero or more\ncalls to `serialize_tuple_elt`, then a call to `serialize_tuple_end`. A\nreasonable implementation would be to forward to `serialize_seq`.",267,null],[10,"serialize_tuple_elt","","Serializes a tuple element. Must have previously called\n`serialize_tuple`.",267,null],[10,"serialize_tuple_end","","Finishes serializing a tuple.",267,null],[10,"serialize_tuple_struct","","Begins to serialize a tuple struct. This call must be followed by zero\nor more calls to `serialize_tuple_struct_elt`, then a call to\n`serialize_tuple_struct_end`. A reasonable implementation would be to\nforward to `serialize_tuple`.",267,null],[10,"serialize_tuple_struct_elt","","Serializes a tuple struct element. Must have previously called\n`serialize_tuple_struct`.",267,null],[10,"serialize_tuple_struct_end","","Finishes serializing a tuple struct.",267,null],[10,"serialize_tuple_variant","","Begins to serialize a tuple variant. This call must be followed by zero\nor more calls to `serialize_tuple_variant_elt`, then a call to\n`serialize_tuple_variant_end`. A reasonable implementation would be to\nforward to `serialize_tuple_struct`.",267,null],[10,"serialize_tuple_variant_elt","","Serializes a tuple variant element. Must have previously called\n`serialize_tuple_variant`.",267,null],[10,"serialize_tuple_variant_end","","Finishes serializing a tuple variant.",267,null],[10,"serialize_map","","Begins to serialize a map. This call must be followed by zero or more\ncalls to `serialize_map_key` and `serialize_map_value`, then a call to\n`serialize_map_end`.",267,null],[10,"serialize_map_key","","Serialize a map key. Must have previously called `serialize_map`.",267,null],[10,"serialize_map_value","","Serialize a map value. Must have previously called `serialize_map`.",267,null],[10,"serialize_map_end","","Finishes serializing a map.",267,null],[10,"serialize_struct","","Begins to serialize a struct. This call must be followed by zero or more\ncalls to `serialize_struct_elt`, then a call to `serialize_struct_end`.",267,null],[10,"serialize_struct_elt","","Serializes a struct field. Must have previously called\n`serialize_struct`.",267,null],[10,"serialize_struct_end","","Finishes serializing a struct.",267,null],[10,"serialize_struct_variant","","Begins to serialize a struct variant. This call must be followed by zero\nor more calls to `serialize_struct_variant_elt`, then a call to\n`serialize_struct_variant_end`.",267,null],[10,"serialize_struct_variant_elt","","Serialize a struct variant element. Must have previously called\n`serialize_struct_variant`.",267,null],[10,"serialize_struct_variant_end","","Finishes serializing a struct variant.",267,null],[14,"forward_to_deserialize!","serde","Helper to forward `Deserializer` methods to `Deserializer::deserialize`.\nEvery given method ignores all arguments and forwards to `deserialize`.\nNote that `deserialize_enum` simply returns an `Error::invalid_type`; a\nbetter approach is tracked in [serde-rs/serde#521][1].",null,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Hash"],[8,"Hasher"],[8,"Write"],[8,"PartialEq"],[8,"PartialOrd"],[3,"Utf16Encoder"],[3,"SplitWhitespace"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"EncodeUtf16"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"Iterator"],[8,"ExactSizeIterator"],[3,"ByteBuf"],[3,"ByteBufVisitor"],[3,"Bytes"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PhantomDataVisitor"],[3,"BinaryHeapVisitor"],[3,"BTreeSetVisitor"],[3,"LinkedListVisitor"],[3,"HashSetVisitor"],[3,"HashSet"],[3,"VecVisitor"],[3,"VecDequeVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"BTreeMapVisitor"],[3,"HashMapVisitor"],[3,"HashMap"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"PathBuf"],[3,"Arc"],[3,"Rc"],[3,"Duration"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[3,"Path"],[8,"Error"],[8,"Serialize"],[8,"Serializer"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,null],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,null],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,null],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,null],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,null],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,null],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,null],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,null],[11,"encode","","",8,null],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,null],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,null],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,null],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,null],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,null],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,null],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,null],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,null],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"description","","",21,null],[11,"fmt","","",21,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"description","","",24,null],[11,"fmt","","",24,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,null],[11,"fmt","","",27,null],[11,"partial_cmp","","",27,null],[11,"lt","","",27,null],[11,"le","","",27,null],[11,"gt","","",27,null],[11,"ge","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",27,null],[11,"eq","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",29,null],[11,"eq","","",29,null],[11,"fmt","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"fmt","","",28,null],[11,"description","","",30,null],[11,"cause","","",30,null],[11,"fmt","","",30,null],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,null],[11,"fmt","","",29,null],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,null],[11,"fmt","","",31,null],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,null],[11,"emit_nil","","",35,null],[11,"emit_usize","","",35,null],[11,"emit_u64","","",35,null],[11,"emit_u32","","",35,null],[11,"emit_u16","","",35,null],[11,"emit_u8","","",35,null],[11,"emit_isize","","",35,null],[11,"emit_i64","","",35,null],[11,"emit_i32","","",35,null],[11,"emit_i16","","",35,null],[11,"emit_i8","","",35,null],[11,"emit_bool","","",35,null],[11,"emit_f64","","",35,null],[11,"emit_f32","","",35,null],[11,"emit_char","","",35,null],[11,"emit_str","","",35,null],[11,"emit_enum","","",35,null],[11,"emit_enum_variant","","",35,null],[11,"emit_enum_variant_arg","","",35,null],[11,"emit_enum_struct_variant","","",35,null],[11,"emit_enum_struct_variant_field","","",35,null],[11,"emit_struct","","",35,null],[11,"emit_struct_field","","",35,null],[11,"emit_tuple","","",35,null],[11,"emit_tuple_arg","","",35,null],[11,"emit_tuple_struct","","",35,null],[11,"emit_tuple_struct_arg","","",35,null],[11,"emit_option","","",35,null],[11,"emit_option_none","","",35,null],[11,"emit_option_some","","",35,null],[11,"emit_seq","","",35,null],[11,"emit_seq_elt","","",35,null],[11,"emit_map","","",35,null],[11,"emit_map_elt_key","","",35,null],[11,"emit_map_elt_val","","",35,null],[11,"encode","","",27,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,null],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,null],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,null],[11,"is_empty","","Returns true if the stack is empty.",36,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,null],[11,"next","","",37,null],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,null],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,null],[11,"read_usize","","",39,null],[11,"read_u8","","",39,null],[11,"read_u16","","",39,null],[11,"read_u32","","",39,null],[11,"read_u64","","",39,null],[11,"read_isize","","",39,null],[11,"read_i8","","",39,null],[11,"read_i16","","",39,null],[11,"read_i32","","",39,null],[11,"read_i64","","",39,null],[11,"read_f32","","",39,null],[11,"read_f64","","",39,null],[11,"read_bool","","",39,null],[11,"read_char","","",39,null],[11,"read_str","","",39,null],[11,"read_enum","","",39,null],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,null],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,null],[11,"read_struct","","",39,null],[11,"read_struct_field","","",39,null],[11,"read_tuple","","",39,null],[11,"read_tuple_arg","","",39,null],[11,"read_tuple_struct","","",39,null],[11,"read_tuple_struct_arg","","",39,null],[11,"read_option","","",39,null],[11,"read_seq","","",39,null],[11,"read_seq_elt","","",39,null],[11,"read_map","","",39,null],[11,"read_map_elt_key","","",39,null],[11,"read_map_elt_val","","",39,null],[11,"error","","",39,null],[11,"to_json","","",27,null],[11,"to_json","collections::string","",0,null],[11,"to_json","collections::vec","",4,null],[11,"to_json","collections::btree::map","",14,null],[11,"to_json","std::collections::hash::map","",16,null],[11,"to_json","core::option","",5,null],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,null],[11,"fmt","","Encodes a json value into a string",40,null],[11,"fmt","","Encodes a json value into a string",41,null],[11,"indent","","Set the indentation level for the emitted JSON",42,null],[11,"fmt","","Encodes a json value into a string",42,null],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,null],[10,"read_usize","","",43,null],[10,"read_u64","","",43,null],[10,"read_u32","","",43,null],[10,"read_u16","","",43,null],[10,"read_u8","","",43,null],[10,"read_isize","","",43,null],[10,"read_i64","","",43,null],[10,"read_i32","","",43,null],[10,"read_i16","","",43,null],[10,"read_i8","","",43,null],[10,"read_bool","","",43,null],[10,"read_f64","","",43,null],[10,"read_f32","","",43,null],[10,"read_char","","",43,null],[10,"read_str","","",43,null],[10,"read_enum","","",43,null],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,null],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,null],[10,"read_struct","","",43,null],[10,"read_struct_field","","",43,null],[10,"read_tuple","","",43,null],[10,"read_tuple_arg","","",43,null],[10,"read_tuple_struct","","",43,null],[10,"read_tuple_struct_arg","","",43,null],[10,"read_option","","",43,null],[10,"read_seq","","",43,null],[10,"read_seq_elt","","",43,null],[10,"read_map","","",43,null],[10,"read_map_elt_key","","",43,null],[10,"read_map_elt_val","","",43,null],[10,"error","","",43,null],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,null],[10,"emit_usize","","",44,null],[10,"emit_u64","","",44,null],[10,"emit_u32","","",44,null],[10,"emit_u16","","",44,null],[10,"emit_u8","","",44,null],[10,"emit_isize","","",44,null],[10,"emit_i64","","",44,null],[10,"emit_i32","","",44,null],[10,"emit_i16","","",44,null],[10,"emit_i8","","",44,null],[10,"emit_bool","","",44,null],[10,"emit_f64","","",44,null],[10,"emit_f32","","",44,null],[10,"emit_char","","",44,null],[10,"emit_str","","",44,null],[10,"emit_enum","","",44,null],[10,"emit_enum_variant","","",44,null],[10,"emit_enum_variant_arg","","",44,null],[10,"emit_enum_struct_variant","","",44,null],[10,"emit_enum_struct_variant_field","","",44,null],[10,"emit_struct","","",44,null],[10,"emit_struct_field","","",44,null],[10,"emit_tuple","","",44,null],[10,"emit_tuple_arg","","",44,null],[10,"emit_tuple_struct","","",44,null],[10,"emit_tuple_struct_arg","","",44,null],[10,"emit_option","","",44,null],[10,"emit_option_none","","",44,null],[10,"emit_option_some","","",44,null],[10,"emit_seq","","",44,null],[10,"emit_seq_elt","","",44,null],[10,"emit_map","","",44,null],[10,"emit_map_elt_key","","",44,null],[10,"emit_map_elt_val","","",44,null],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,null],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,null],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["heapsize"] = {"doc":"Data structure measurement.","items":[[5,"heap_size_of","heapsize","Get the size of a heap block.",null,null],[8,"HeapSizeOf","","",null,null],[10,"heap_size_of_children","","Measure the size of any heap-allocated structures that hang off this value, but not the\nspace taken up by the value itself (i.e. what size_of::&lt;T&gt; measures, more or less); that\nspace is handled by the implementation of HeapSizeOf for Box&lt;T&gt; below.",0,null],[11,"heap_size_of_children","alloc::boxed","",1,null],[11,"heap_size_of_children","collections::string","",2,null],[11,"heap_size_of_children","core::option","",3,null],[11,"heap_size_of_children","core::result","",4,null],[11,"heap_size_of_children","collections::borrow","",5,null],[11,"heap_size_of_children","alloc::arc","",6,null],[11,"heap_size_of_children","core::cell","",7,null],[11,"heap_size_of_children","","",8,null],[11,"heap_size_of_children","collections::vec","",9,null],[11,"heap_size_of_children","collections::vec_deque","",10,null],[11,"heap_size_of_children","collections::vec","",9,null],[11,"heap_size_of_children","std::collections::hash::set","",11,null],[11,"heap_size_of_children","std::collections::hash::map","",12,null],[11,"heap_size_of_children","core::marker","",13,null],[11,"heap_size_of_children","collections::linked_list","",14,null],[11,"heap_size_of_children","collections::btree::map","",15,null],[11,"heap_size_of_children","core::sync::atomic","",16,null],[11,"heap_size_of_children","","",17,null],[11,"heap_size_of_children","","",18,null],[11,"heap_size_of_children","std::net::ip","",19,null],[11,"heap_size_of_children","","",20,null],[14,"known_heap_size!","heapsize","For use on types defined in external crates\nwith known heap sizes.",null,null]],"paths":[[8,"HeapSizeOf"],[3,"Box"],[3,"String"],[4,"Option"],[4,"Result"],[4,"Cow"],[3,"Arc"],[3,"RefCell"],[3,"Cell"],[3,"Vec"],[3,"VecDeque"],[3,"HashSet"],[3,"HashMap"],[3,"PhantomData"],[3,"LinkedList"],[3,"BTreeMap"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Ipv4Addr"],[3,"Ipv6Addr"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,null],[10,"swap_bytes","","Reverses the byte order of the integer.",15,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
initSearch(searchIndex);
